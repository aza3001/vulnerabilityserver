package VSUI;

import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.JPanel;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.geom.FlatteningPathIterator;

import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTable;
import javax.swing.border.LineBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import javax.swing.JScrollPane;

import server.vulnerable.storage.CVSSInfo;
import server.vulnerable.storage.VulInfoList;
import javax.swing.ListSelectionModel;

public class InfoDetails extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JFrame frame;
	private JTable table;
	private DefaultTableModel dtable;
	private ArrayList<VulInfoList> vulinfo = null;
	private JLabel label = null;
	private JLabel label_1 = null;
	private JLabel label_2 = null;
	private JLabel label_3 = null;
	private JLabel label_4 = null;
	private JLabel label_5 = null;
	private JLabel label_6 = null;
	private JLabel label_7 = null;
	private JLabel label_8 = null;
	/**
	 * Launch the application.
	 */
//	public static void main(String[] args) {
////		EventQueue.invokeLater(new Runnable() {
////			public void run() {
////				try {
////					InfoDetails window = new InfoDetails();
////					window.frame.setVisible(true);
////				} catch (Exception e) {
////					e.printStackTrace();
////				}
////			}
////		});
//		InfoDetails window = new InfoDetails();
//		window.frame.setVisible(true);
//	}

	/**
	 * Create the application.
	 */
	public InfoDetails() {
		initialize();
		displayInfo ();
	}
	
	public InfoDetails (ArrayList<VulInfoList> vulinfo) {
		this.vulinfo = vulinfo;
		initialize();
		displayInfo ();
		this.frame.setVisible(true);
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 700, 420);
//		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		tabbedPane.setBounds(0, 0, 684, 382);
		frame.getContentPane().add(tabbedPane);
		
		JPanel panel = new JPanel();
		tabbedPane.addTab("CVSS", null, panel, null);
		panel.setLayout(null);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(0, 0, 329, 354);
		panel.add(scrollPane);
		
		dtable = new DefaultTableModel(
				new Object[][] {
					},
					new String[] {
						"ID", "CVSS"
					}
				);
		
		table = new JTable();
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			
			@Override
			public void valueChanged(ListSelectionEvent e) {
				// TODO Auto-generated method stub
				int row = table.getSelectedRow();
				
//				System.out.println(dtable.getValueAt(row, 1));
				
				try {
					URL url = new URL("http://www.cvedetails.com/cve-details.php?cve_id=" + dtable.getValueAt(row, 1));
					URLConnection conn = url.openConnection();
					DataInputStream in = new DataInputStream( conn.getInputStream() );
					BufferedReader br = new BufferedReader( new InputStreamReader(in) );
					
					boolean start = false;
					boolean cvssbool = false;
					boolean confident = false;
					boolean integrity = false;
					boolean availability = false;
					boolean complexity = false;
					boolean authentication = false;
					boolean access = false;
					boolean vul = false;
					boolean cwe = false;
					CVSSInfo cvss = null;
					while (br.ready())
					{
						String read = br.readLine();
//						System.out.println(read);
						
						if (read.contains("id=\"cvssscorestable\"")) {
							cvss = new CVSSInfo();
							start = true;
						} else if (read.contains("</table>")) {
							start = false;
						} else if (start) {
							String temp = "";
							if (read.contains("Cvss Score"))
								cvssbool = true;
							else if (cvssbool) {
								temp = read.replace("<td>", "");
								cvss.setCvssscore(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
								cvssbool = false;
							}
							
							if (read.contains("Confidentiality Impact")) 
								confident = true;
							else if (confident && read.contains("cvssdesc")) {
								temp = read.substring(read.indexOf(">") + 1, read.indexOf("</"));
								cvss.setConfidentialitydesc(temp);
								
								confident = false;
							} else if (confident) {
								temp = read.replace("<td>", "");
								cvss.setConfidentialityrate(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
							}
							
							if (read.contains("Integrity Impact")) 
								integrity = true;
							else if (integrity && read.contains("cvssdesc")) {
								temp = read.substring(read.indexOf(">") + 1, read.indexOf("</"));
								cvss.setIntegritydesc(temp);
								
								integrity = false;
							} else if (integrity) {
								temp = read.replace("<td>", "");
								cvss.setIntegrityrate(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
							}
							
							if (read.contains("Availability Impact")) 
								availability = true;
							else if (availability && read.contains("cvssdesc")) {
								temp = read.substring(read.indexOf(">") + 1, read.indexOf("</"));
								cvss.setAvailabilitydesc(temp);
								
								availability = false;
							} else if (availability) {
								temp = read.replace("<td>", "");
								cvss.setAvailabilityrate(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
							}
							
							if (read.contains("Access Complexity")) 
								complexity = true;
							else if (complexity && read.contains("cvssdesc")) {
								temp = read.substring(read.indexOf(">") + 1, read.indexOf("</"));
								cvss.setComplexitydesc(temp);
								
								complexity = false;
							} else if (complexity) {
								temp = read.replace("<td>", "");
								cvss.setComplexityrate(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
							}
							
							if (read.contains("Authentication") && !read.contains("(")) 
								authentication = true;
							else if (authentication && read.contains("cvssdesc")) {
								temp = read.substring(read.indexOf(">") + 1, read.indexOf("</"));
								cvss.setAuthendesc(temp);
								
								authentication = false;
							} else if (authentication) {
								temp = read.replace("<td>", "");
								cvss.setAuthenrate(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
							}
							
							if (read.contains("Gained Access")) 
								access = true;
							else if (access) {
								temp = read.replace("<td>", "");
								cvss.setGainedaccessrate(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
								
								access = false;
							}
							
							if (read.contains("Vulnerability Type(s)")) 
								vul = true;
							else if (vul && !read.contains("<td>")) {
								if (!read.contains("<td>"))
									cvss.setVuldesc("Not defined");
								else {
									temp = read.replace("<td>", "");
//									System.out.println(temp);
									cvss.setVuldesc(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
								}
								
								vul = false;
							}
							
							if (read.contains("CWE ID")) 
								cwe = true;
							else if (cwe) {
								temp = read.replace("<td>", "");
								if (temp.contains("not defined"))
									cvss.setCweid("not defined");
								else
									cvss.setCweid(temp.substring(temp.indexOf(">") + 1, temp.indexOf("</")));
								
								cwe = false;
							}
						}
					}
					display (cvss);
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		table.setModel(dtable);
		scrollPane.setViewportView(table);
		table.setBorder(new LineBorder(new Color(0, 0, 0)));
		
		JPanel panel_1 = new JPanel();
		panel_1.setBorder(new LineBorder(new Color(0, 0, 0)));
		panel_1.setBounds(336, 0, 343, 331);
		panel.add(panel_1);
		panel_1.setLayout(null);
		
		JLabel lblConfidentialityImpact = new JLabel("CVSS Score");
		lblConfidentialityImpact.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblConfidentialityImpact.setBounds(120, 11, 155, 20);
		panel_1.add(lblConfidentialityImpact);
		
		JLabel lblConfidentialityImpact_1 = new JLabel("Confidentiality Impact");
		lblConfidentialityImpact_1.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblConfidentialityImpact_1.setBounds(55, 83, 155, 20);
		panel_1.add(lblConfidentialityImpact_1);
		
		JLabel lblIntegrityImpact = new JLabel("Integrity Impact");
		lblIntegrityImpact.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblIntegrityImpact.setBounds(55, 114, 155, 20);
		panel_1.add(lblIntegrityImpact);
		
		JLabel lblAvailabilityImpact = new JLabel("Availability Impact");
		lblAvailabilityImpact.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblAvailabilityImpact.setBounds(55, 145, 155, 20);
		panel_1.add(lblAvailabilityImpact);
		
		JLabel lblAccessComplexity = new JLabel("Access Complexity");
		lblAccessComplexity.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblAccessComplexity.setBounds(55, 176, 155, 20);
		panel_1.add(lblAccessComplexity);
		
		JLabel lblAuthentication = new JLabel("Authentication");
		lblAuthentication.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblAuthentication.setBounds(55, 207, 155, 20);
		panel_1.add(lblAuthentication);
		
		JLabel lblGainedAccess = new JLabel("Gained Access");
		lblGainedAccess.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblGainedAccess.setBounds(55, 238, 155, 20);
		panel_1.add(lblGainedAccess);
		
		JLabel lblVulnerabilityTypes = new JLabel("Vulnerability Types");
		lblVulnerabilityTypes.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblVulnerabilityTypes.setBounds(55, 269, 155, 20);
		panel_1.add(lblVulnerabilityTypes);
		
		JLabel lblCweId = new JLabel("CWE ID");
		lblCweId.setFont(new Font("Tahoma", Font.PLAIN, 13));
		lblCweId.setBounds(55, 300, 155, 20);
		panel_1.add(lblCweId);
		
		label = new JLabel("0.0");
		label.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label.setBounds(135, 30, 40, 20);
		panel_1.add(label);
		
		
		label_1 = new JLabel("0.0");
		label_1.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label_1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label_1.setBounds(220, 83, 100, 20);
		panel_1.add(label_1);
		
		label_2 = new JLabel("0.0");
		label_2.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label_2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label_2.setBounds(220, 114, 100, 20);
		panel_1.add(label_2);
		
		label_3 = new JLabel("0.0");
		label_3.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label_3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label_3.setBounds(220, 145, 100, 20);
		panel_1.add(label_3);
		
		label_4 = new JLabel("0.0");
		label_4.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label_4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label_4.setBounds(220, 176, 100, 20);
		panel_1.add(label_4);
		
		label_5 = new JLabel("0.0");
		label_5.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label_5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label_5.setBounds(220, 207, 100, 20);
		panel_1.add(label_5);
		
		label_6 = new JLabel("0.0");
		label_6.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label_6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label_6.setBounds(220, 238, 100, 20);
		panel_1.add(label_6);
		
		label_7 = new JLabel("0.0");
		label_7.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label_7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label_7.setBounds(220, 269, 100, 20);
		panel_1.add(label_7);
		
		label_8 = new JLabel("0.0");
		label_8.setFont(new Font("Tahoma", Font.PLAIN, 13));
		label_8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		label_8.setBounds(220, 300, 100, 20);
		panel_1.add(label_8);
		
		JButton btnClose = new JButton("CLOSE");
		btnClose.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (e.getActionCommand().equalsIgnoreCase("CLOSE")) {
//					System.out.println(e);
//					frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					frame.dispose();
				}
			}
		});
		btnClose.setBounds(590, 331, 89, 23);
		panel.add(btnClose);
	}
	
	private void displayInfo() {
		int row = 0;
		for (VulInfoList list : vulinfo) {
			if (list.getReference().startsWith("CVE")){
				dtable.setRowCount(row + 1);
				dtable.setValueAt(list.getId(), row, 0);
				dtable.setValueAt(list.getReference(), row, 1);
				row++;
			}
		}
	}
	
	private void display(CVSSInfo cvss) {
		label.setText(cvss.getCvssscore());
		setLabelBackground(cvss.getCvssscore());
		
		label_1.setText(cvss.getConfidentialityrate());
		setLabelBackgroundCIA(cvss.getConfidentialityrate(), "conf");
		
		label_2.setText(cvss.getIntegrityrate());
		setLabelBackgroundCIA(cvss.getIntegrityrate(), "int");
		
		label_3.setText(cvss.getAvailabilityrate());
		setLabelBackgroundCIA(cvss.getIntegrityrate(), "available");
		
		label_4.setText(cvss.getComplexityrate());
		setLabelBackgroundComp(cvss.getComplexityrate());
		
		label_5.setText(cvss.getAuthenrate());
		setLabelBackgroundAuth(cvss.getAuthenrate());
		
		label_6.setText(cvss.getGainedaccessrate());
		setLabelBackgroundAccess(cvss.getGainedaccessrate());
		
		label_7.setText(cvss.getVuldesc());
		label_8.setText(cvss.getCweid());
		
	}
	
	private void setLabelBackground (String cvss) {
		float score = Float.parseFloat(cvss);
		
		if (score <= 4)
			label.setBackground(Color.green);
		else if (score <= 7)
			label.setBackground(Color.orange);
		else
			label.setBackground(Color.red);
		
		label.setOpaque(true);
	}
	
	private void setLabelBackgroundCIA (String rate, String type) {
		if (rate.equalsIgnoreCase("complete")) {
			if (type.equalsIgnoreCase("conf"))
				label_1.setForeground(Color.red);
			if (type.equalsIgnoreCase("int"))
				label_2.setForeground(Color.red);
			if (type.equalsIgnoreCase("available"))
				label_3.setForeground(Color.red);
			
		} else if (rate.equalsIgnoreCase("partial")) {
			if (type.equalsIgnoreCase("conf"))
				label_1.setForeground(Color.orange);
			if (type.equalsIgnoreCase("int"))
				label_2.setForeground(Color.orange);
			if (type.equalsIgnoreCase("available"))
				label_3.setForeground(Color.orange);
			
		} else if (rate.equalsIgnoreCase("none")) {
			if (type.equalsIgnoreCase("conf"))
				label_1.setForeground(Color.green);
			if (type.equalsIgnoreCase("int"))
				label_2.setForeground(Color.green);
			if (type.equalsIgnoreCase("available"))
				label_3.setForeground(Color.green);
		}
		
		if (type.equalsIgnoreCase("conf"))
			label_1.setOpaque(true);
		if (type.equalsIgnoreCase("int"))
			label_2.setOpaque(true);
		if (type.equalsIgnoreCase("available"))
			label_3.setOpaque(true);
	}
	
	private void setLabelBackgroundComp (String rate) {
		if (rate.equalsIgnoreCase("low"))
			label_4.setForeground(Color.red);
		else if (rate.equalsIgnoreCase("medium"))
			label_4.setForeground(Color.orange);
		else if (rate.equalsIgnoreCase("high"))
			label_4.setForeground(Color.green);
		
		label_4.setOpaque(true);
	}
	
	private void setLabelBackgroundAuth (String rate) {
		if (rate.equalsIgnoreCase("not required"))
			label_5.setForeground(Color.red);
		else
			label_5.setForeground(Color.green);
		
		label_5.setOpaque(true);
	}
	
	private void setLabelBackgroundAccess (String rate) {
		if (rate.equalsIgnoreCase("None"))
			label_6.setForeground(Color.green);
		else
			label_6.setForeground(Color.red);
		
		label_6.setOpaque(true);
	}
}
