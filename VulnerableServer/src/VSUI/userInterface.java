package VSUI;

import java.awt.Component;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import java.awt.BorderLayout;

import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.JTable;
import javax.swing.JScrollPane;

import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
//import javax.swing.text.Position;
import javax.swing.border.LineBorder;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
//import java.awt.event.FocusEvent;
//import java.awt.event.FocusListener;
//import java.awt.event.MouseEvent;
//import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;

//import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.DefaultMutableTreeNode;
//import javax.swing.tree.MutableTreeNode;
//import javax.swing.tree.TreePath;

import monitor.storage.information.agent.storage.Characteristic;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import server.vulnerability.util.LookupAgent;
import server.vulnerability.util.VulnerabilityForDetect;
import server.vulnerable.storage.VulInfoList;
import server.vulnerable.util.CheckServer;
import server.vulnerable.util.OvalParser;
import server.vulnerable.util.GenerateChart;

import javax.swing.JRadioButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.swing.JTextPane;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JProgressBar;
import org.eclipse.wb.swing.FocusTraversalOnArray;

public class userInterface {

	private JFrame frame;
	private static DefaultTableModel dtable_1;
	private static DefaultTableModel dtable;
	private static JTable table_1;
	private static JTree tree;
//	private static JTree tree1;
	private static DefaultTreeModel dtree;
//	private static JRadioButton rdbtnById;
	private static JRadioButton rdbtnByIpAddress;
//	private static JRadioButton rdbtnByMacaddress;
	private static JTable table;
	private static JComboBox<String> comboBox;
	private static JComboBox<String> comboBox_1;
	private static File take_user;
	private static JPanel panel_2;
	private static GenerateChart ch;
	private static File[] user_list;
	private static JButton btnNewButton_1;
	private static JTextPane textPane_2;
	private static JPanel panel_3;
	private static JButton btnNewButton;
	private static JTextPane textPane;
	private static JTextField textField;
	private static JButton button;
	private static JButton btnNewButton_2;
	private static JTable table_2;
	private static JProgressBar progressBar;
	private JPanel panel_5;
	private static DefaultTableModel dtable_2;
	private static JButton button_1;
	private static JButton button_2;
	private static OvalParser ovalp;
	private static JButton button_3;
	private static JTextPane textPane_1;
	private static ArrayList<Characteristic> arrayCh;
	private static LookupAgent lookup;
	private static JButton btnNewButton_3;
	private static VulnerabilityForDetect vd;
	private static CheckServer cs;
	private static JTextArea textarea;
	private static File ont;
	private static JButton btnNewButton_4; 
	private static HashMap<String, Boolean> hm;
	private static JTabbedPane tabbedPane;
	private static DefaultMutableTreeNode dmt;
//	private static JButton buttontemp;
	private static JButton btnShowDetail;
	private static ArrayList<VulInfoList> vulinfo;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userInterface window = new userInterface();
					window.frame.setVisible(true);
					
					btnNewButton_1.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent e) {
							// TODO Auto-generated method stub
							if (e.getActionCommand().equalsIgnoreCase("Register")) {
								String ip = textPane_2.getText();
								
								boolean bool = false;
								if (!ip.trim().equalsIgnoreCase("")) {
									try {
										ont = new File("ontip.dat");
										if (!ont.exists()) {
											FileOutputStream fos = new FileOutputStream(ont);
											ObjectOutputStream osw = new ObjectOutputStream(fos);
											osw.writeObject(ip);
											osw.close();
										} else {
											FileInputStream fis = new FileInputStream( ont );
											ObjectInputStream ois = new ObjectInputStream( fis );
											String tmp = (String)ois.readObject();
											ois.close();
											
											if (!tmp.equalsIgnoreCase(ip)) {
												FileOutputStream fos = new FileOutputStream(ont);
												ObjectOutputStream oos = new ObjectOutputStream(fos);
												oos.writeObject(ip);
												oos.close();
											}
											
										}
									} catch (Exception e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}
									bool = true;
								}
								
								if (bool) {
									textPane_2.setText(ip);
									textPane_2.setEditable(false);
									
									btnNewButton_1.setText("Change IP");

								}
							} else if (e.getActionCommand().equalsIgnoreCase("Change IP")) {
								textPane_2.setText("");
								textPane_2.setEditable(true);
								btnNewButton_1.setText("Register");
								
							}
						}
					});
					
					btnNewButton.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent e) {
							// TODO Auto-generated method stub
							if (e.getActionCommand().equalsIgnoreCase("Start Search") && btnNewButton_1.getText().equalsIgnoreCase("Change IP") &&
									!textPane.getText().trim().equalsIgnoreCase("") && !textPane_1.getText().trim().equalsIgnoreCase("")) {
									String[] startip = textPane.getText().split("\\.");
									String[] endip = textPane_1.getText().split("\\.");
									String ontologyserverip = textPane_2.getText().trim();
									
	//								boolean bool = new LookupAgent().lookupIP(startip, endip, dtable_1);
									lookup = new LookupAgent(startip, endip, dtable_1, ontologyserverip, btnNewButton);
									new Thread(lookup).start();
									
									btnNewButton.setEnabled(false);
//									btnNewButton_1.setEnabled(false);								
							}
						}
					});
					
					btnNewButton_3.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent e) {
							// TODO Auto-generated method stub
							if (e.getActionCommand().equalsIgnoreCase("Start Server")) {
								vd = new VulnerabilityForDetect(11120, textarea, dtree, dtable_1, tree, comboBox);
								new Thread(vd).start();
								
								cs = new CheckServer(12345, textarea);
								new Thread(cs).start();
								
								btnNewButton_3.setEnabled(false);
								btnNewButton_4.setEnabled(true);
							}
						}
					});
					
					tree.addTreeSelectionListener(new TreeSelectionListener() {
						
						@Override
						public void valueChanged(TreeSelectionEvent e) {
							// TODO Auto-generated method stub
							String s = e.getNewLeadSelectionPath().getLastPathComponent().toString();
							
							if (s.contains(".html")) {
								Object[] str = e.getNewLeadSelectionPath().getPath();
								
								try{
									new ProcessBuilder("cmd", "/c", System.getProperty("user.dir") + "\\result\\" + str[str.length-2] + "\\" + str[str.length-1]).start(); 
									System.out.println( System.getProperty("user.dir") + "\\result\\" + str[str.length-2] + "\\" + str[str.length-1]);
								}catch (Exception e1) {
									// TODO: handle exception
									e1.printStackTrace();
								}
							}
						}
					});
					
//					rdbtnById.addActionListener(new ActionListener() {
//						
//						@Override
//						public void actionPerformed(ActionEvent e) {
//							// TODO Auto-generated method stub
//							if (e.getActionCommand().equalsIgnoreCase("By Id")){
//								rdbtnByIpAddress.setSelected(false);
//								rdbtnByMacaddress.setSelected(false);
//							}
//						}
//					});
				/*
				 * this will be active after implementing update tree	
				 */
//					rdbtnByIpAddress.addActionListener(new ActionListener() {
//						
//						@Override
//						public void actionPerformed(ActionEvent e) {
//							// TODO Auto-generated method stub
//							if (e.getActionCommand().equalsIgnoreCase("By IP address")){
//								rdbtnById.setSelected(false);
//								rdbtnByMacaddress.setSelected(false);
//							}
//						}
//					});

//					buttontemp.addActionListener(new ActionListener() {
//						
//						@Override
//						public void actionPerformed(ActionEvent e) {
//							// TODO Auto-generated method stub
//							DefaultTreeModel model = dtree;
//							
//							File resultfolder = new File ("result\\" + "10.141.161.79");
//							if (resultfolder.exists()){
//								File[] list = resultfolder.listFiles();
//								
//								File lastModifiedFile = null;
//								if (list.length != 0) {
//									lastModifiedFile = list[0];
//									for (int i = 1; i < list.length; i++) {
//									   if (lastModifiedFile.lastModified() <= list[i].lastModified()) {
//									       lastModifiedFile = list[i];
//									   }
//									}
//								}
//								
//								System.out.println(lastModifiedFile.getPath());
//								
//								MutableTreeNode nNode = new DefaultMutableTreeNode();
//								TreePath path = tree.getNextMatch("10.141.161.79", 0, Position.Bias.Forward);
//								MutableTreeNode node = (MutableTreeNode) path.getLastPathComponent();
//								
////								model.insertNodeInto(nNode, node, model.getChildCount(model.getRoot()));
//								node.insert(new DefaultMutableTreeNode(lastModifiedFile.toString().substring(lastModifiedFile.toString().lastIndexOf("\\") + 1)), nNode.getChildCount());
//								
//								model.reload(node);
//							} 
//						}
//					});
					
//					rdbtnByMacaddress.addActionListener(new ActionListener() {
//						
//						@Override
//						public void actionPerformed(ActionEvent e) {
//							// TODO Auto-generated method stub
//							if (e.getActionCommand().equalsIgnoreCase("By Mac Address")){
//								rdbtnById.setSelected(false);
//								rdbtnByIpAddress.setSelected(false);
//							}
//						}
//					});
	
					comboBox.addActionListener(new ActionListener() {
						
						File files;
						File[] file_lists;
						@Override
						public void actionPerformed(ActionEvent e) {
							new Vector<String>();
							// TODO Auto-generated method stub
//							System.out.println(e);
							if (e.getActionCommand().equalsIgnoreCase("comboBoxChanged")) {
								comboBox_1.addItem("");
								if (comboBox_1.getItemCount() >= 1) {
									comboBox_1.removeAllItems();
									comboBox_1.addItem("");
								}
//								System.out.println(comboBox.getSelectedItem());
								files = new File("./result/" + comboBox.getSelectedItem());
								file_lists = files.listFiles();
								for (File f : file_lists) {
//									file_list.add(f.getName());
									if (f.getName().contains("xml"))
										comboBox_1.addItem(f.getName());
								}
							}
						}
					});
					
					comboBox_1.addActionListener(new ActionListener() {
						
						File file;
						@Override
						public void actionPerformed(ActionEvent e) {
//							System.out.println(e);
							// TODO Auto-generated method stu
//							System.out.println(comboBox_1.getSelectedIndex());
							if (e.getActionCommand().equalsIgnoreCase("comboBoxChanged")
									&& comboBox_1.getSelectedItem() != null && !comboBox_1.getSelectedItem().toString().equalsIgnoreCase("") ) {
								
								file = new File ("result/" + comboBox.getSelectedItem() + "/" + comboBox_1.getSelectedItem().toString().replace("[", "").replace("]", ""));
								vulinfo = getCharateristic(file);
								setTable(vulinfo);
								setToolTipText();
//								setChart (file);
								setChart (vulinfo);
							}
						}
						
					});
					
					button.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent e) {
							JFileChooser jc;
							// TODO Auto-generated method stub
							if (e.getActionCommand().equalsIgnoreCase("Open a File..")) {
								jc = new JFileChooser();
								jc.showOpenDialog(null);
								File file = jc.getSelectedFile();
								if (file != null) {
									String filename = file.getAbsolutePath();
									textField.setText(filename);
								}
							}
						}
					});
					
					btnNewButton_2.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent arg0) {
							// TODO Auto-generated method stub
							if (arg0.getActionCommand().equalsIgnoreCase("PARSE")) {
								
								if (!textField.getText().trim().equalsIgnoreCase("") && textField.getText().contains("oval.xml")) {
//									arry = OvalParser.parseOVAL(textField.getText());
									dtable_2.setRowCount(0);
									ovalp = new OvalParser(textField.getText(), dtable_2);
									new Thread(ovalp).start();
									
//									dtable_2.setRowCount(arry.size());
//									int count = 0;
//									for (String str : arry) {
//										dtable_2.setValueAt(str, count, 0);
//										count++;
//									}
									btnNewButton_2.setEnabled(false);
									button_1.setEnabled(true);
								}
							}
						}
					});
					
					button_2.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent e) {
							// TODO Auto-generated method stub
							if (e.getActionCommand().equalsIgnoreCase("SPLIT")) {
								if (ovalp == null) {
									int count = 0;
									ArrayList<String> tmpArry = new ArrayList<String>();
									while ( count != dtable_2.getRowCount() ) {
										tmpArry.add(dtable_2.getValueAt(count, 0).toString());
										count++;
									}
									ovalp = new OvalParser(tmpArry, progressBar);
									new Thread(ovalp).start();
									
									button_1.setEnabled(true);
									btnNewButton_2.setEnabled(false);
								}
							}
						}
					});
					
					button_1.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent e) {
							// TODO Auto-generated method stub
							
							if (e.getActionCommand().equalsIgnoreCase("STOP")) {
								if (ovalp.isParseOvalRunning()) {
									ovalp.stopThread();
									ovalp = null;
								}
								
//								if (ovals is running)
//								ovals.stopThread();
								
								btnNewButton.setEnabled(true);
								btnNewButton_2.setEnabled(true);
								button_1.setEnabled(false);
								button_2.setEnabled(true);
							}
						}
					});
					
					button_3.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent arg0) {
							// TODO Auto-generated method stub
							if (arg0.getActionCommand().equalsIgnoreCase("STOP SEARCH")) {
								lookup.stopThread();
							}
						}
					});
					
					btnNewButton_4.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent e) {
							// TODO Auto-generated method stub
							vd.stopThread();
							cs.stopThread();
							btnNewButton_3.setEnabled(true);
							btnNewButton_4.setEnabled(false);
						}
					});
					
					btnShowDetail.addActionListener(new ActionListener() {
						
						@Override
						public void actionPerformed(ActionEvent e) {
							// TODO Auto-generated method stub
							if (vulinfo != null) 
								new InfoDetails(vulinfo);			
						}
					});
					
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					try{
						String ip = textPane_2.getText();
						if (!ont.exists()) {
							FileOutputStream fos = new FileOutputStream(ont);
							ObjectOutputStream osw = new ObjectOutputStream(fos);
							osw.writeObject(ip);
							osw.close();
						} else {
							FileInputStream fis = new FileInputStream( ont );
							ObjectInputStream ois = new ObjectInputStream( fis );
							String tmp = (String)ois.readObject();
							ois.close();
							
							if (!tmp.equalsIgnoreCase(ip)) {
								FileOutputStream fos = new FileOutputStream(ont);
								ObjectOutputStream oos = new ObjectOutputStream(fos);
								oos.writeObject(ip);
								oos.close();
							}
							
						}
					} catch(Exception e) {
						e.printStackTrace();
					}
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public userInterface() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	@SuppressWarnings({ "resource", "unchecked" })
	private void initialize() {
		String ontip = "";
		ont = new File("ontip.dat");
		try{
			if (ont.exists()) {
				FileInputStream fis = new FileInputStream( ont );
				ObjectInputStream ois = new ObjectInputStream( fis );
				ontip = (String)ois.readObject();
				
			}
		}catch (Exception e) {
			// TODO: handle exception
		}
		
		File file = new File("runnable_file");
		if (file.isDirectory()) {
			String[] list = file.list();
			hm = new HashMap<String, Boolean>();
			
			for (String str : list) {
				hm.put(str, true);
			}
		}
		
		textarea = new JTextArea();
		
		take_user = new File ("./result");
		if (take_user.exists())
			user_list = take_user.listFiles();
		else
			take_user.mkdir();
		
		File chFileExist = new File("ip.dat");
		try{
			if (chFileExist.exists()) {
				FileInputStream fis = new FileInputStream( chFileExist );
				ObjectInputStream ois = new ObjectInputStream( fis );
				arrayCh = (ArrayList<Characteristic>)ois.readObject();
			}
		}catch (Exception e) {
			// TODO: handle exception
		}
		
		frame = new JFrame();
		frame.setBounds(100, 100, 807, 516);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		frame.getContentPane().add(tabbedPane, BorderLayout.CENTER);
		
		dtable_1 = new DefaultTableModel(
				new Object[][] {
					},
					new String[] {
						"NUMBER", "MAC ADDRESS", "ID", "LASTEST IP", "LATEST IP DATE"
					}
				);
		
		if (arrayCh != null) {
		dtable_1.setRowCount(arrayCh.size());
			for (int i = 0; i < arrayCh.size(); i++) {
				dtable_1.setValueAt( i + 1, i, 0);
				dtable_1.setValueAt(arrayCh.get(i).getMacaddress(), i, 1);
				dtable_1.setValueAt(arrayCh.get(i).getHostName(), i, 2);
				dtable_1.setValueAt(arrayCh.get(i).getIPs().get(arrayCh.get(i).getIPs().size() - 1), i, 3);
			}
		}
		
		JPanel panel = new JPanel();
		tabbedPane.addTab("USER & AGENT", null, panel, null);
		panel.setLayout(null);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(10, 110, 766, 329);
		panel.add(scrollPane_1);
		
		table_1 = new JTable();
		table_1.setModel(dtable_1);
		scrollPane_1.setViewportView(table_1);
		
		textPane = new JTextPane();
		textPane.setBounds(167, 45, 130, 20);
		textPane.setBorder(new LineBorder(Color.gray));
		panel.add(textPane);
		
		textPane_1 = new JTextPane();
		textPane_1.setBounds(330, 45, 130, 20);
		textPane_1.setBorder(new LineBorder(Color.gray));
		panel.add(textPane_1);
		
		JLabel label = new JLabel("~");
		label.setFont(new Font("Tahoma", Font.PLAIN, 18));
		label.setBounds(307, 45, 20, 14);
		panel.add(label);
		
		btnNewButton = new JButton("START SEARCH");
		btnNewButton.setBounds(470, 42, 130, 23);
		panel.add(btnNewButton);
		
		JLabel lblNewLabel_1 = new JLabel("IP ADDRESS RANGE");
		lblNewLabel_1.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblNewLabel_1.setBounds(10, 42, 157, 23);
		panel.add(lblNewLabel_1);
		
		panel_3 = new JPanel();
		panel_3.setBounds(10, 11, 766, 30);
		panel.add(panel_3);
		panel_3.setLayout(null);
		
		JLabel label_1 = new JLabel("OVAL SERVER IP");
		label_1.setBounds(0, 5, 130, 20);
		panel_3.add(label_1);
		label_1.setFont(new Font("Tahoma", Font.PLAIN, 14));
		
		textPane_2 = new JTextPane();
		textPane_2.setBounds(157, 5, 130, 20);
		textPane_2.setBorder(new LineBorder(Color.gray));
		panel_3.add(textPane_2);
		
		if (!ontip.equalsIgnoreCase("")) {
			textPane_2.setText(ontip);
			textPane_2.setEditable(false);
			btnNewButton_1 = new JButton("CHANGE IP");
			btnNewButton_1.setBounds(460, 0, 269, 23);
			panel_3.add(btnNewButton_1);
		} else {
			btnNewButton_1 = new JButton("REGISTER");
			btnNewButton_1.setBounds(460, 0, 269, 23);
			panel_3.add(btnNewButton_1);
		}
		
		button_3 = new JButton("STOP SEARCH");
		button_3.setBounds(610, 42, 130, 23);
		panel.add(button_3);
		
		btnNewButton_3 = new JButton("Start Server");
		btnNewButton_3.setBounds(180, 76, 270, 23);
		panel.add(btnNewButton_3);
		panel.setFocusTraversalPolicy(new FocusTraversalOnArray(new Component[]{textPane_2, btnNewButton_1, textPane, textPane_1, btnNewButton, button_3, label, scrollPane_1, table_1, lblNewLabel_1, panel_3, label_1}));
		
		btnNewButton_4 = new JButton("Stop Server");
		btnNewButton_4.setBounds(470, 76, 270, 23);
		btnNewButton_4.setEnabled(false);
		panel.add(btnNewButton_4);
		
		JPanel panel_1 = new JPanel();
		tabbedPane.addTab("RESULT REPORT", null, panel_1, null);
		panel_1.setLayout(null);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(0, 38, 776, 412);
		panel_1.add(scrollPane);
		
		tree = new JTree();
		dmt = new DefaultMutableTreeNode("IPaddress") {
			private static final long serialVersionUID = 1L;
			{
				if (user_list != null){
					for (int i = 0; i < user_list.length; i++) {
						DefaultMutableTreeNode node_1;
						node_1 = new DefaultMutableTreeNode(user_list[i].getName());
						File[] file_lists = new File (user_list[i].toString()).listFiles();
						for (int j = 0; j < file_lists.length; j++) {
							if (!file_lists[j].getName().contains("xml")) {
							node_1.add(new DefaultMutableTreeNode(file_lists[j].getName()));
							add(node_1);
							}
						}
					}
				}
			}
		};
		dtree = new DefaultTreeModel(dmt);
		tree.setModel(dtree);
		scrollPane.setViewportView(tree);
		
//		buttontemp = new JButton("push");
//		buttontemp.setBounds(6, 8, 109, 23);
//		panel_1.add(buttontemp);
		
		rdbtnByIpAddress = new JRadioButton("By IP address");
		rdbtnByIpAddress.setSelected(true);
		rdbtnByIpAddress.setBounds(6, 8, 109, 23);
		panel_1.add(rdbtnByIpAddress);
		
//		rdbtnByMacaddress = new JRadioButton("By Mac address");
//		rdbtnByMacaddress.setBounds(130, 8, 162, 23);
//		panel_1.add(rdbtnByMacaddress);
//		
//		rdbtnById = new JRadioButton("By ID");
//		rdbtnById.setBounds(294, 8, 109, 23);
//		panel_1.add(rdbtnById);
		
		panel_2 = new JPanel();
		tabbedPane.addTab("ASSESSMENT", null, panel_2, null);
		panel_2.setLayout(null);
		
		Vector<String> list = new Vector<String>();
		list.add("");
		for (File user : user_list)
			list.add(user.getName());
		
		comboBox = new JComboBox<String>(list);
		comboBox.setSelectedIndex(0);
		comboBox.setBounds(10, 32, 373, 20);
		
		panel_2.add(comboBox);
		
		ArrayList<Double> values = new ArrayList<Double>();
		values.add(new Double(25));
		values.add(new Double(25));
		values.add(new Double(25));
		values.add(new Double(25));
		 
		ArrayList<Color> colors = new ArrayList<Color>();
		colors.add(Color.gray);
		colors.add(Color.green);
		colors.add(Color.blue);
		colors.add(Color.red);
		
		ch = new GenerateChart(values, colors);
		ch.setBorder(new LineBorder(new Color(0, 0, 0)));
		ch.setBounds(393, 11, 383, 407);
		panel_2.add(ch);
		ch.setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Inventory : " + values.get(0) + "%");
		lblNewLabel.setBounds(10, 10, 115, 14);
		lblNewLabel.setForeground(Color.gray);
		ch.add(lblNewLabel);
		
		JLabel lblNewLabel1 = new JLabel("Vulnerability : " + values.get(1) + "%");
		lblNewLabel1.setBounds(10, 25, 115, 14);
		lblNewLabel1.setForeground(Color.green);
		ch.add(lblNewLabel1);
		
		JLabel lblNewLabel2 = new JLabel("Compliance : " + values.get(2) + "%");
		lblNewLabel2.setBounds(10, 40, 115, 14);
		lblNewLabel2.setForeground(Color.blue);
		ch.add(lblNewLabel2);
		
		JLabel lblNewLabel3 = new JLabel("Patches : " + values.get(3) + "%");
		lblNewLabel3.setBounds(10, 55, 115, 14);
		lblNewLabel3.setForeground(Color.pink);
		ch.add(lblNewLabel3);
		
		JScrollPane scrollPane_2 = new JScrollPane();
		scrollPane_2.setBounds(10, 111, 373, 328);
		panel_2.add(scrollPane_2);
		
//		JPanel panel_3 = new JPanel();
//		panel_3.setBorder(new LineBorder(new Color(0, 0, 0)));
//		panel_3.setBounds(353, 11, 423, 245);
//		panel_2.add(panel_3);
		
		dtable = new DefaultTableModel(
				new Object[][] {
					},
					new String[] {
						"Title", "Content", "Title"
					}
				);
		table = new JTable();
		table.setModel(dtable);
		scrollPane_2.setViewportView(table);
		table.setBorder(new LineBorder(new Color(0, 0, 0)));
		
		JLabel lblUserName = new JLabel("User Name");
		lblUserName.setBounds(10, 11, 73, 14);
		panel_2.add(lblUserName);
		
		JLabel lblDate = new JLabel("Date");
		lblDate.setBounds(10, 63, 46, 14);
		panel_2.add(lblDate);
		
		comboBox_1 = new JComboBox<String>();
		comboBox_1.setBounds(10, 80, 373, 20);
		panel_2.add(comboBox_1);
		
		btnShowDetail = new JButton("Detail");
		btnShowDetail.setBounds(687, 422, 89, 23);
		panel_2.add(btnShowDetail);
		
		JPanel panel_4 = new JPanel();
		tabbedPane.addTab("XML PARSER", null, panel_4, null);
		panel_4.setLayout(null);
		
		textField = new JTextField();
		textField.setBounds(10, 11, 354, 23);
		panel_4.add(textField);
		textField.setColumns(10);
		
		button = new JButton("Open a File..");
		button.setBounds(363, 11, 115, 23);
		panel_4.add(button);
		
		btnNewButton_2 = new JButton("PARSE");
		btnNewButton_2.setBounds(488, 11, 90, 23);
		panel_4.add(btnNewButton_2);
		
		progressBar = new JProgressBar();
		progressBar.setBounds(10, 425, 766, 14);
		progressBar.setVisible(false);
		panel_4.add(progressBar);
		
		panel_5 = new JPanel();
		panel_5.setBounds(0, 45, 786, 405);
		panel_4.add(panel_5);
		panel_5.setLayout(null);
		
		JScrollPane scrollPane_3 = new JScrollPane();
		scrollPane_3.setBounds(10, 5, 766, 363);
		panel_5.add(scrollPane_3);
		
		CustomRenderer cr = new CustomRenderer();
		
		dtable_2 = new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"OVAL Definitions IDs"
				}
			);
		table_2 = new JTable();
		table_2.setModel(dtable_2);
		table_2.setDefaultRenderer(Object.class, cr);
		scrollPane_3.setViewportView(table_2);
		table_2.setBorder(new LineBorder(new Color(0, 0, 0)));
		
		button_1 = new JButton("STOP");
		button_1.setBounds(686, 11, 90, 23);
		button_1.setEnabled(false);
		panel_4.add(button_1);
		
		button_2 = new JButton("SPLIT");
		button_2.setBounds(588, 11, 90, 23);
		button_2.setEnabled(false);
		panel_4.add(button_2);
	}
	
	private static ArrayList<VulInfoList> getCharateristic (File file) {
		ArrayList<VulInfoList> vulArray = new ArrayList<VulInfoList>();
		
		try {
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(file);
			
			VulInfoList vil;
			NodeList nList = doc.getElementsByTagName("oval-def:definition");
			
			for (int i = 0; i < nList.getLength(); i++) {
				Node nNode = nList.item(i);
				
				if (nNode.getNodeType() == Node.ELEMENT_NODE) {
					vil = new VulInfoList();
					Element eElement = (Element) nNode;
					
					vil.setVul_Class(eElement.getAttribute("class"));
					vil.setId(eElement.getAttribute("id"));
					vil.setTitle(eElement.getElementsByTagName("oval-def:title").item(0).getTextContent());
//					
					NodeList nodelist = eElement.getElementsByTagName("oval-def:reference");
					for (int j = 0; j < nodelist.getLength(); j++) {
						vil.setReference(nodelist.item(j).getAttributes().getNamedItem("ref_id").getNodeValue());
					}
					
					vulArray.add(vil);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return vulArray;
	}
	
//	public static void setTable (Characteristic c) {
//		
//		ArrayList<Interface> arry_inter = c.getArray();
//		int count = 4 + (arry_inter.size() * 3);
//		
//		dtable.setRowCount(count);
//		
//		int mcount = 0;
//		dtable.setValueAt("OS Name", mcount, 0);
//		dtable.setValueAt(c.getOsName(), mcount, 1);
//		mcount += 1;
//		dtable.setValueAt("OS Version", mcount, 0);
//		dtable.setValueAt(c.getOsVersion(), mcount, 1);
//		mcount += 1;
//		dtable.setValueAt("Architecture", mcount, 0);
//		dtable.setValueAt(c.getArchitecture(), mcount, 1);
//		mcount += 1;
//		dtable.setValueAt("Host Name", mcount, 0);
//		dtable.setValueAt(c.getHostName(), mcount, 1);
//		mcount += 1;
//		for (int i = 0; i < arry_inter.size(); i++) {
//			dtable.setValueAt("Interface", mcount, 0);
//			dtable.setValueAt(arry_inter.get(i).getInterfaceName(), mcount, 1);
//			mcount += 1;
//			dtable.setValueAt("IP address", mcount, 0);
//			dtable.setValueAt(arry_inter.get(i).getIpAddress(), mcount, 1);
//			mcount += 1;
//			dtable.setValueAt("Mac Address", mcount, 0);
//			dtable.setValueAt(arry_inter.get(i).getMacAddress(), mcount, 1);
//			mcount += 1;
//		}
//	}
	
	public static void setTable (ArrayList<VulInfoList> vArry) {
		
		dtable.setRowCount(vArry.size());
		
		VulInfoList vil;
		for (int i = 0; i < vArry.size(); i++) {
			vil = vArry.get(i);
			dtable.setValueAt(vil.getVul_Class(), i, 0);
			dtable.setValueAt(vil.getId(), i, 1);
			dtable.setValueAt(vil.getTitle(), i, 2);
		}
		
	}
	
	private static void setChart (ArrayList<VulInfoList> vulinfo) {
		panel_2.remove(ch);
		
		int total = vulinfo.size();
		int inventory = 0;
		int vulnerability = 0;
		int compliance = 0;
		int patches = 0;
		
		for (VulInfoList list : vulinfo) {
			if (list.getVul_Class().equalsIgnoreCase("inventory"))
				inventory++;
			else if (list.getVul_Class().equalsIgnoreCase("vulnerability"))
				vulnerability++;
			else if (list.getVul_Class().equalsIgnoreCase("compliance"))
				compliance++;
			else if (list.getVul_Class().equalsIgnoreCase("Patches"))
				patches++;
		}
		
		ArrayList<Double> values = new ArrayList<Double>();
		values.add((double) inventory / total * 100);
		values.add((double) vulnerability / total * 100);
		values.add((double) compliance / total * 100);
		values.add((double) patches / total * 100);
		 
		ArrayList<Color> colors = new ArrayList<Color>();
		colors.add(Color.gray);
		colors.add(Color.green);
		colors.add(Color.blue);
		colors.add(Color.red);
		
		ch = new GenerateChart(values, colors);
		ch.setBorder(new LineBorder(new Color(0, 0, 0)));
		ch.setBounds(393, 11, 383, 407);
		panel_2.add(ch);
		ch.setLayout(null);
		
		JLabel lblNewLabel = new JLabel("Inventory : " + values.get(0).toString().substring(0, values.get(0).toString().indexOf(".") + 2) + "%");
		lblNewLabel.setBounds(10, 10, 115, 14);
		lblNewLabel.setForeground(Color.gray);
		ch.add(lblNewLabel);
		
		JLabel lblNewLabel1 = new JLabel("vulnerability : " + values.get(1).toString().substring(0, values.get(1).toString().indexOf(".") + 2) + "%");
		lblNewLabel1.setBounds(10, 25, 115, 14);
		lblNewLabel1.setForeground(Color.green);
		ch.add(lblNewLabel1);
		
		JLabel lblNewLabel2 = new JLabel("Compliance : " + values.get(2).toString().substring(0, values.get(2).toString().indexOf(".") + 2) + "%");
		lblNewLabel2.setBounds(10, 40, 115, 14);
		lblNewLabel2.setForeground(Color.blue);
		ch.add(lblNewLabel2);
		
		JLabel lblNewLabel3 = new JLabel("Patches : " + values.get(3).toString().substring(0, values.get(3).toString().indexOf(".") + 2) + "%");
		lblNewLabel3.setBounds(10, 55, 115, 14);
		lblNewLabel3.setForeground(Color.pink);
		ch.add(lblNewLabel3);
		
		panel_2.revalidate();
		panel_2.repaint();
	}
	
	private static void setToolTipText () {
		TableColumnModel colModel = table.getColumnModel();
		for (int i = 0; i < colModel.getColumnCount(); i++) {
			colModel.getColumn(i).setCellRenderer(new RowRenderer());
		}
	}
	
	static class RowRenderer extends DefaultTableCellRenderer {

		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row,
				int column) {
			// TODO Auto-generated method stub
			super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
			setToolTipText((String) table.getValueAt(row, column));
			
			return this;
		}
	}
	
	class CustomRenderer extends DefaultTableCellRenderer {
		
		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row,
				int column) {
			// TODO Auto-generated method stub
			Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
			
			String id = table.getValueAt(row, 0).toString();
			
			if (!isExist(id)) {
				c.setBackground(Color.gray);
			}
			
			return c;
		}
		
		private boolean isExist (String id) {
			
			if (hm.containsKey(id))
				return true;
			else
				return false;
		}
	}
	
}






