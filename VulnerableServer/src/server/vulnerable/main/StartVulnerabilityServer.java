package server.vulnerable.main;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
//import java.net.ServerSocket;

//import server.vulnerability.util.LookupAgent;
import server.vulnerability.util.VulnerabilityForDetect;
import server.vulnerable.util.OvalParser;
//import server.vulnerable.util.WhatisMyIP;

public class StartVulnerabilityServer {
	
	public static void main(String[] args) {
		
		String select = "";
		
		while ( true ) {
			System.out.println("1: look up ip and start server \n" +
					"2: start server only \n" +
					"3: parse oval definition \n" +
					"4: Display report by IP adress \n" +
					"etc: Exit program" +
					"(Select one)");
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			
	//		if the agent installed and started during processing lookup the ip address
	//		new LookupAgentEX(9995).start();
			try {
				select = br.readLine();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			 if ( select.equalsIgnoreCase("1")) {
				String iprange = "";
				String start = "";
				String end = "";
				
				System.out.println( "Set up IP range for looking up agent : start : ex) 10.0.0.1 to 10.128.128.128 ");
				try {
					iprange = br.readLine();
				
					String[] splitrange = iprange.split("to");
					
					start = splitrange[0].trim();
					end = splitrange[1].trim();
					
					System.out.println(start);
					System.out.println(end);
					
					String[] startip = start.split("\\.");
					String[] endip = end.split("\\.");
				
	//				new VulnerabilityForDetect(31120).start();
					
					// Look up the ip address that agent is installed in computer 
//					LookupAgent lookupAgent = new LookupAgent();
//					lookupAgent.lookupIP(startip, endip);
//					lookupAgent.sendIPInfo( WhatisMyIP.getIPAddress() );
					
					//		new VulnerabilityForOSInfo(21120).start();
					//		new VulnerabilityForOSInfo(21121).start();
					//		new VulnerabilityForOSInfo(21122).start();
					//		new VulnerabilityForOSInfo(21123).start();
					//		new VulnerabilityForOSInfo(21124).start();
					//		new VulnerabilityForOSInfo(21125).start();
							
							// start Vulnerability detect server
//							new VulnerabilityForDetect(11120).start();
					//		new VulnerabilityForDetect(11121).start();
					//		new VulnerabilityForDetect(11122).start();
					//		new VulnerabilityForDetect(11123).start();
					//		new VulnerabilityForDetect(11124).start();
					//		new VulnerabilityForDetect(11125).start();
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			} else if (select.equalsIgnoreCase("2")) {
				// start OSInfo server
//				new VulnerabilityForOSInfo(21120, server).start();
//				new VulnerabilityForOSInfo(21121).start();
//				new VulnerabilityForOSInfo(21122).start();
//				new VulnerabilityForOSInfo(21123).start();
//				new VulnerabilityForOSInfo(21124).start();
//				new VulnerabilityForOSInfo(21125).start();
				
				// start Vulnerability detect server
//				new VulnerabilityForDetect(11120).start();
//				new VulnerabilityForDetect(11121).start();
//				new VulnerabilityForDetect(11122).start();
//				new VulnerabilityForDetect(11123).start();
//				new VulnerabilityForDetect(11124).start();
//				new VulnerabilityForDetect(11125).start();
				
			} else if (select.equalsIgnoreCase("3")){
				String ovalfilepath = "";
				
				System.out.println("input oval xml file path : ");
				try {
					ovalfilepath = br.readLine();
				} catch (Exception e) {
					// TODO: handle exception
				}
				
				File ovalfile = new File(ovalfilepath);
				
				if (ovalfilepath.endsWith(".xml") && !ovalfile.exists()){
					System.out.println("input file path correctly!!");
					continue;
				} else {
					OvalParser.splitOVALByID( OvalParser.parseOVAL(ovalfile) );
				}
				
			} else if (select.equalsIgnoreCase("4")) {
				String IPaddress = "";
				
				try {
					System.out.println("input IP Address : ");
					IPaddress = br.readLine();
					
					File file = new File ("result" + "\\" + IPaddress);
					String[] list = file.list();
					
					System.out.println("format shows remote_month_day_hour_min.html");
					for ( int i = 0; i < list.length; i++ ) {
						System.out.println( (i+1) + " : " + list[i] );
					}
					
					String filenumber = "";
					System.out.println("Which file you want to display? ");
					
					filenumber = br.readLine();
					
					File openfile = new File (file + "\\" + list[Integer.parseInt(filenumber)-1]);
					
					new ProcessBuilder("cmd", "/c", openfile.getAbsoluteFile().toString()).start();
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
				
			} else {
				System.exit(1);
			}
		}
	}
}
