package server.vulnerable.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;

import monitor.storage.information.agent.storage.ComputerInfoHolder;
//import monitor.storage.information.agent.storage.OSDependentDef;
import monitor.storage.information.agent.storage.VulnerabilityInfo;

//import org.mitre.ovalutils.splitter.main.OvalSplitter;
//import server.vulnerable.main.SendToOWLServer;

public class VulnerableProcessor {
	public VulnerableProcessor() {
		// TODO Auto-generated constructor stub
	}
	
	public boolean Processor ( ArrayList<VulnerabilityInfo> viArry ) throws IOException {
		//split and test
		boolean result = true;
		String domain = "";
		String hostname = "";
		String username = "";
		String password = "";
		
		ArrayList<VulnerabilityInfo> viinfoArry = new ArrayList<VulnerabilityInfo>();
		if (!viArry.isEmpty()) {
			
			for (VulnerabilityInfo vinfo : viArry) {
				domain = vinfo.getDomain();
				hostname = vinfo.getIp();
				username = vinfo.getUser();
				password = vinfo.getPassword();
				
				if (viinfoArry.size() == 0) {
					viinfoArry.add(vinfo);
				} else {
					boolean exist = false;
					for (int idx = 0; idx < viinfoArry.size(); idx++) {
						if (viinfoArry.get(idx).getId().equalsIgnoreCase(vinfo.getId())) {
							exist = true;
							break;
						}
					}
					if (!exist) {
						viinfoArry.add(vinfo);
					}
					
				}
			}
			
			splitAndRun ( hostname, domain, username, password, viinfoArry);
			 
		}
		return result;
	}
	
	public boolean Processor ( String hostname, ComputerInfoHolder info ) throws IOException {
		//split and test
		boolean result = true;
		String domain = info.getDomain();
		String username = info.getUsername();
		String password = info.getPassword();
		ArrayList<VulnerabilityInfo> viArry = info.getViArry();
		
		ArrayList<VulnerabilityInfo> viinfoArry = new ArrayList<VulnerabilityInfo>();
		if (!viArry.isEmpty()) {
			
			for (VulnerabilityInfo vinfo : viArry) {
				
				if (viinfoArry.size() == 0) {
					viinfoArry.add(vinfo);
				} else {
					boolean exist = false;
					for (int idx = 0; idx < viinfoArry.size(); idx++) {
						if (viinfoArry.get(idx).getId().equalsIgnoreCase(vinfo.getId())) {
							exist = true;
							break;
						}
					}
					if (!exist) {
						viinfoArry.add(vinfo);
					}
					
				}
			}
			
			splitAndRun ( hostname, domain, username, password, viinfoArry);
			 
		}
		return result;
	}
	
	private void splitAndRun (String hostname, String domain, String username, String password, 
		ArrayList<VulnerabilityInfo> viinfoArry) {
//		ArrayList<String> ids = new ArrayList<String>();
		
		Calendar calendar = new GregorianCalendar();
		int hour = calendar.get(Calendar.HOUR);
		int minute = calendar.get(Calendar.MINUTE);
		int day = calendar.get(Calendar.DATE);
		int month = calendar.get(Calendar.MONTH) + 1;
		
		BufferedReader in = null;
		String line = "";
		
		try {	
//			String path = "Oval_Splitter";
//			File file = new File( path );
//			if (!file.exists()) 
//				file.mkdir();
//			
//			String mkpath = "runnable_file";
//			mkfile = new File( mkpath + "\\" + hostname );
//			if (!mkfile.exists()) 
//				mkfile.mkdir();
//			
//			for ( VulnerabilityInfo tempvi : viinfoArry ) {
//				String id = tempvi.getId();
////					Process p = Runtime.getRuntime().exec("cmd /c java -jar OVAL_Splitter.jar -f oval.xml -id " + id + " -o " + mkfile.getAbsolutePath() );
//				System.out.println(id);
//				Process p = new ProcessBuilder("cmd", "/c", "java", "-jar", "OVAL_Splitter.jar", "-f", "oval.xml", "-id", id.replace("#", ""), "-o", mkfile.getAbsoluteFile().toString()).directory(new File ("oval_splitter")).start();
//				BufferedReader in = new BufferedReader(  
//	                    new InputStreamReader(p.getInputStream()));
//				String line = "";
//				while ((line =in.readLine())!= null) {
//					System.out.println(line);
//				}
//				ids.add(id);
//			}
			
			app(username, password, hostname, domain);
			
//			mkfile = new File ("filetemp");
//			mkfile.deleteOnExit();
			File source = new File( "runnable_file" );
			File mkfile = new File ("filetemp");
			File mkfile_1 = new File("filetemp_v");
			
//			System.out.println(mkfile.getAbsolutePath());
			Process p = null;
			if (mkfile.exists()) {
				p = new ProcessBuilder("cmd", "/c", "rmdir", "/s", "/q", mkfile.getAbsolutePath() ).start();
				p.waitFor();
			}
			if (mkfile_1.exists()) {
				p = new ProcessBuilder("cmd", "/c", "rmdir", "/s", "/q", mkfile_1.getAbsolutePath() ).start();
				p.waitFor();
			}
			
//			if (p.exitValue() == 1)
//				System.out.println("Previous file(s) were deleted");
			
			if (!mkfile.exists())
				mkfile.mkdir();
			
			for ( VulnerabilityInfo tempvi : viinfoArry ) {
				String id = tempvi.getId();
				id = id.replace(":", ".");
//				System.out.println(source.getAbsolutePath() + "\\" + id + ".xml");
//				System.out.println(mkfile.getAbsolutePath() + "\\" + id + ".xml");
				p = new ProcessBuilder("cmd", "/c", "copy", source.getAbsolutePath() + "\\" + id + ".xml", mkfile.getAbsolutePath() + "\\" + id + ".xml" ).start();
				in = new BufferedReader(  
	                    new InputStreamReader(p.getInputStream()));
				line = "";
				while ((line =in.readLine())!= null) {
//					System.out.println(line);
				}
				p.waitFor();
			}
			
			System.out.println( "Total <" + viinfoArry.size() + "> file(s) are copied and will be checked." );
			
			AvoidException(mkfile);
			
			String resultpath = "runfile";
			File merge = new File( resultpath + "\\" + hostname );
			File resultfolder = new File ("result\\" + hostname);
			if (!resultfolder.exists()) 
				resultfolder.mkdir();
			
			if (!merge.exists())
				merge.mkdir();
//			else {
//				merge.delete();
//				merge.mkdir();	
//			}
			Process pr = null;
			if (mkfile.exists() && mkfile.list().length != 0) {
				String filename = month + "_" + day + "_" + hour + "_" + minute + "_i.xml";
				p = new ProcessBuilder("cmd", "/c", "java", "-jar", "OvalMerge.jar", "-i", mkfile.getAbsolutePath(), "-o", merge.getAbsolutePath(), "-f", filename ).directory(new File ("oval_merge")).start();
				in = new BufferedReader(  
	                    new InputStreamReader(p.getInputStream()));
				line = "";
				while ((line = in.readLine()) != null) {
//					System.out.println(line);
				}
				p.waitFor();
				
				if (merge.exists()) {
					
					pr = new ProcessBuilder("cmd", "/c", "jovaldi", "-o", merge.getAbsoluteFile() + "\\" + filename, 
							"-m", 
							"-x", resultfolder.getAbsolutePath() + "\\remote-" + month + "_" + day + "_" + hour + "_" + minute + ".html",
							"-r", resultfolder.getAbsolutePath() + "\\remote-"+ month + "_" + hour + "_" + minute + ".xml",
							"-y", "remote.log", "-plugin", "remote" ).directory(new File("jovaldi_a")).start();
					in = new BufferedReader(  
		                    new InputStreamReader(pr.getInputStream()));
					boolean problem = false;
					line = "";
					while ((line =in.readLine())!= null) {
						System.out.println(line);
						if (line.contains("FATAL ERROR")) {
							problem = true;
						}
					}
					if (!problem) {
						System.out.println();
						System.out.println("===========================");
						System.out.println("Report has been generated!!");
						System.out.println("===========================");
						System.out.println();
					} else {
						System.out.println();
						System.out.println("===========================");
						System.out.println("Problem occurred during report genenrating!!");
						System.out.println("===========================");
						System.out.println();
					}
				}
			}
			
			if (mkfile_1.exists() && mkfile_1.list().length != 0) {
				String filename = month + "_" + day + "_" + hour + "_" + minute + "_j.xml";
				p = new ProcessBuilder("cmd", "/c", "java", "-jar", "OvalMerge.jar", "-i", mkfile_1.getAbsolutePath(), "-o", merge.getAbsolutePath(), "-f", filename ).directory(new File ("oval_merge")).start();
				
				in = new BufferedReader(  
	                    new InputStreamReader(p.getInputStream()));
				line = "";
				while ((line = in.readLine()) != null) {
					System.out.println(line);
				}
				
				if (mkfile_1.exists() && mkfile_1.list().length > 0) {
					pr = new ProcessBuilder("cmd", "/c", "jovaldi", "-o", merge.getAbsoluteFile() + "\\" + filename, 
							"-m", 
							"-x", resultfolder.getAbsolutePath() + "\\remote-" + month + "_" + day + "_" + hour + "_" + minute + "_+1.html",
							"-r", resultfolder.getAbsolutePath() + "\\remote-"+ month + "_" + hour + "_" + minute + "_+1.xml",
							"-y", "remote.log", "-plugin", "remote" ).directory(new File("jovaldi_a")).start();
					in = new BufferedReader(  
		                    new InputStreamReader(pr.getInputStream()));
					boolean problem = false;
					line = "";
					while ((line =in.readLine())!= null) {
						System.out.println(line);
						if (line.contains("FATAL ERROR")) {
							problem = true;
						}
					}
					
					if (!problem) {
						System.out.println();
						System.out.println("===========================");
						System.out.println("Report has been generated!!");
						System.out.println("===========================");
						System.out.println();
					} else {
						System.out.println();
						System.out.println("===========================");
						System.out.println("Problem occurred during report genenrating!!");
						System.out.println("===========================");
						System.out.println();
					}
				}
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
	}
	
	private void app (String user, String password, String hostname, String domain ) {
		Properties prop = new Properties();
		
		user = user.replace("/", "");
		hostname = hostname.replace("/", "");
		domain = domain.replace("/", "");
		
		try{
			prop.setProperty( "hostname", hostname );
			prop.setProperty( "user.name", user );
			prop.setProperty( "user.password", password );
			prop.setProperty( "nt.domain", domain );
			
			prop.store(new FileOutputStream("jovaldi_a" +"\\" + "config.properties"), null);
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} 
	}
	
	private void AvoidException (File path) throws IOException
	{
		String[] list = path.list();
		File mkfile_1 = new File("filetemp_v");
		Process p = null;
		
		if (!mkfile_1.exists())
			mkfile_1.mkdir();
		
		for (int i = 0; i < list.length; i++) {
			try {
				File fXmlFile = new File (path.getAbsolutePath() + "\\" + list[i]);
				DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
				Document doc = dBuilder.parse(fXmlFile);
				
				System.out.println(list[i]);
				doc.getElementsByTagName("variables").item(0).getChildNodes();
				
			} catch (Exception e) {
//				e.printStackTrace();
				
//				File fName = new File (path.getAbsolutePath() + "\\" + list[i] + ".xml");
//				fName.renameTo(new File(mkfile_1.getAbsolutePath() + "\\" + list[i] + ".xml") );
				
//				System.out.println("move" + " " + path.getAbsolutePath() + "\\" + list[i] + " " + mkfile_1.getAbsolutePath() + "\\" + list[i]);
				p = new ProcessBuilder("cmd", "/c", "copy", path.getAbsolutePath() + "\\" + list[i], mkfile_1.getAbsolutePath() + "\\" + list[i] ).start();
				BufferedReader in = new BufferedReader(  
	                    new InputStreamReader(p.getInputStream()));
				String line = "";
//				while ((line =in.readLine())!= null) {
//					System.out.println(line);
//				}
				
				try {
					p.waitFor();
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				p = new ProcessBuilder("cmd", "/c", "del", path.getAbsolutePath() + "\\" + list[i] ).start();
				in = new BufferedReader(  
	                    new InputStreamReader(p.getInputStream()));
				line = "";
				while ((line =in.readLine())!= null) {
//					System.out.println(line);
				}
				
				try {
					p.waitFor();
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}
	
	}
	
//	public boolean defProcessor ( OSDependentDef osd ) {
//		boolean success = true;
//		
//		try{
//			String mkpath = "InitialStatus";
//			File mkfile = new File( mkpath );
//			if (!mkfile.exists()) 
//				mkfile.mkdir();
//			
//			Calendar calendar = new GregorianCalendar();
//			int hour = calendar.get(Calendar.HOUR);
//			int minute = calendar.get(Calendar.MINUTE);
//			int sec = calendar.get(Calendar.SECOND);
//			int day = calendar.get(Calendar.DATE);
//			int month = calendar.get(Calendar.MONTH);
//			
//			File resultfolder = new File ("Initial_result");
//			if (!resultfolder.exists()) 
//				resultfolder.mkdir();
//			File resultfile = new File (resultfolder + "\\" + osd + "_" + month + "_" + day + "_" + hour + "_" + minute +"_" + sec + "_" + "result.html");
//			
//			Process pr = new ProcessBuilder("cmd", "/c", "jovaldi", "-o", mkfile + "\\" + osd.getHostname() + ".xml", "-m", "-x", resultfile.getAbsolutePath().toString()).directory(new File("jovaldi")).start();
//			BufferedReader in = new BufferedReader(  
//                    new InputStreamReader(pr.getInputStream()));
//			String line = "";
//			while ((line =in.readLine())!= null) {
//				System.out.println(line);
//			}
//			
//		}catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//			return false;
//		}
//		return success;
//	}
	
	
	public static void main(String[] args) throws IOException {
		VulnerableProcessor vp =  new VulnerableProcessor();
		ArrayList<VulnerabilityInfo> viArry = new ArrayList<VulnerabilityInfo>();
		VulnerabilityInfo vi = new VulnerabilityInfo();
		
		VulnerabilityInfo vi1 = new VulnerabilityInfo();
		vi1.setDomain("JJ-pc");
		vi1.setHost("localhost");
		vi1.setUser("JJ");
		vi1.setPassword("1123");
		vi1.setFound(true);
		vi1.setIp("/10.141.176.167");
		
		vi1.setId("oval.org.mitre.oval.def.5915");
		viArry.add(vi1);
		
		vi.setDomain("JJ-pc");
		vi.setHost("localhost");
		vi.setUser("JJ");
		vi.setPassword("1123");
		vi.setFound(true);
		vi.setIp("/10.141.176.167");
		
		vi.setId("oval.org.mitre.oval.def.2058");
		viArry.add(vi);
		
		VulnerabilityInfo vi2 = new VulnerabilityInfo();
		vi2.setDomain("JJ-pc");
		vi2.setHost("localhost");
		vi2.setUser("JJ");
		vi2.setPassword("1123");
		vi2.setFound(true);
		vi2.setIp("/10.141.176.167");
		
		vi2.setId("oval.org.mitre.oval.def.6362");
		viArry.add(vi2);
		
		VulnerabilityInfo vi3 = new VulnerabilityInfo();
		vi3.setDomain("JJ-pc");
		vi3.setHost("localhost");
		vi3.setUser("JJ");
		vi3.setPassword("1123");
		vi3.setFound(true);
		vi3.setIp("/10.141.176.167");
		
		vi3.setId("oval.org.mitre.oval.def.6516");
		viArry.add(vi3);
		
		VulnerabilityInfo vi4 = new VulnerabilityInfo();
		vi4.setDomain("JJ-pc");
		vi4.setHost("localhost");
		vi4.setUser("JJ");
		vi4.setPassword("1123");
		vi4.setFound(true);
		vi4.setIp("/10.141.176.167");
		
		vi4.setId("oval.org.mitre.oval.def.11627");
		viArry.add(vi4);
		
		VulnerabilityInfo vi5 = new VulnerabilityInfo();
		vi5.setDomain("JJ-pc");
		vi5.setHost("localhost");
		vi5.setUser("JJ");
		vi5.setPassword("1123");
		vi5.setFound(true);
		vi5.setIp("/10.141.176.167");
		
		vi5.setId("oval.org.mitre.oval.def.11729");
		viArry.add(vi5);
		
		VulnerabilityInfo vi6 = new VulnerabilityInfo();
		vi6.setDomain("JJ-pc");
		vi6.setHost("localhost");
		vi6.setUser("JJ");
		vi6.setPassword("1123");
		vi6.setFound(true);
		vi6.setIp("/10.141.176.167");
		
		vi6.setId("ooval.org.mitre.oval.def.11956");
		viArry.add(vi6);
		
		VulnerabilityInfo vi7 = new VulnerabilityInfo();
		vi7.setDomain("JJ-pc");
		vi7.setHost("localhost");
		vi7.setUser("JJ");
		vi7.setPassword("1123");
		vi7.setFound(true);
		vi7.setIp("/10.141.176.167");
		
		vi7.setId("oval.org.mitre.oval.def.11964");
		viArry.add(vi7);
		
		VulnerabilityInfo vi8 = new VulnerabilityInfo();
		vi8.setDomain("JJ-pc");
		vi8.setHost("localhost");
		vi8.setUser("JJ");
		vi8.setPassword("1123");
		vi8.setFound(true);
		vi8.setIp("/10.141.176.167");
		
		vi8.setId("oval.org.mitre.oval.def.12196");
		viArry.add(vi8);
		
		VulnerabilityInfo vi9 = new VulnerabilityInfo();
		vi9.setDomain("JJ-pc");
		vi9.setHost("localhost");
		vi9.setUser("JJ");
		vi9.setPassword("1123");
		vi9.setFound(true);
		vi9.setIp("/10.141.176.167");
		
		vi9.setId("oval.org.mitre.oval.def.12203");
		viArry.add(vi9);
		
		vp.Processor(viArry);
	}
	
}
