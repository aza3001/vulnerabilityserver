package server.vulnerable.util;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.parsers.DocumentBuilder;


import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import server.vulnerable.storage.CPEInfo;
import server.vulnerable.storage.CVEInfo;
import server.vulnerable.storage.CVSSInfo;
import server.vulnerable.storage.Categorize;

public class Assessment {
	public static void assess (String path, int app, int os, int hw, float ex, float im) {
		ArrayList<CPEInfo> cpeList = null;
		timeChecker();
		cpeList = getCPE(path);
		System.out.println("getCPE");
		Check();
		timeChecker();
		cpeList = getCVE(path, cpeList);
		System.out.println("getCVE");
		Check();
		timeChecker();
		cpeList = getCVSS(cpeList);
		System.out.println("getCVSS");
		Check();
		timeChecker();
		cpeList = scoreFinalize(cpeList);
		System.out.println("getFinalize");
		Check();
		timeChecker();
		cpeList = calculatorPlus (app, os, hw, ex, im, cpeList);
		System.out.println("getcalulate");
		Check();
//		cpeList = calculator (app, os, hw, ex, im, cpeList);
		

		for (CPEInfo cpe : cpeList) {
			System.out.println(cpe.getProduct());
			for (Categorize category : cpe.getArryCategory()) {
				System.out.println(category.getSignature());
				System.out.println(category.getStandard());
				System.out.println(category.getFinalScore());
			}
			System.out.println("==============================");
		}
//		System.out.println("finished");
	}
	
	private static ArrayList<CPEInfo> scoreFinalize (ArrayList<CPEInfo> cpeList) {
		Categorize category = null;
		try {
			for (CPEInfo cpe : cpeList) {
				if (cpe.getArry_Cve().size() != 0) {
					for (CVEInfo cve : cpe.getArry_Cve()) {
						String[] splitCve = cve.getCvebasescore().split("/");
						String exp = splitCve[0] + "/" + splitCve[1] + "/" + splitCve[2];
						String imp = splitCve[3] + "/" + splitCve[4] + "/" + splitCve[5];
						
						boolean eexist = false;
						boolean iexist = false;
						for (int i = 0; i < cpe.getArryCategory().size(); i++) {
							if (cpe.getArryCategory().get(i).getSignature().equalsIgnoreCase("exp")) {
								if (cpe.getArryCategory().get(i).getStandard().equalsIgnoreCase(exp)) {
									cpe.getArryCategory().get(i).setSignature("exp");
									cpe.getArryCategory().get(i).setStandard(exp);
									cpe.getArryCategory().get(i).setArryCVE(cve);
									eexist = true;
									if (iexist)
										break;
								}
							} 
							if (cpe.getArryCategory().get(i).getSignature().equalsIgnoreCase("imp")){
								if (cpe.getArryCategory().get(i).getStandard().equalsIgnoreCase(imp)) {
									cpe.getArryCategory().get(i).setSignature("imp");
									cpe.getArryCategory().get(i).setStandard(imp);
									cpe.getArryCategory().get(i).setArryCVE(cve);
									iexist = true;
									if (eexist)
										break;
								}
							}
						}
						if (!eexist) {
							category = new Categorize();
							category.setSignature("exp");
							category.setStandard(exp);
							category.setArryCVE(cve);
							
							cpe.setArryCategory(category);
						}
						if (!iexist) {
							category = new Categorize();
							category.setSignature("imp");
							category.setStandard(imp);
							category.setArryCVE(cve);
							
							cpe.setArryCategory(category);
						}
					}
				}
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return cpeList;
	}
	
	private static ArrayList<CPEInfo> calculatorPlus (int app, int os, int hw, float ex, float im, ArrayList<CPEInfo> arryCPE) {
		float result = 0;
		float maxImVal = 0;
		float maxExVal = 0;
		
		for (CPEInfo cpe : arryCPE) {
			for (Categorize category : cpe.getArryCategory())
			{
				float cpeMaxIm = 0;
				float cpeMaxEx = 0;
				for (CVEInfo cve : category.getArryCVE()) {
					cpeMaxIm = cpeMaxIm + Float.valueOf(cve.getImpactScore());
					cpeMaxEx = cpeMaxEx + Float.valueOf(cve.getExploitScore());
				}
				category.setTotalEx(String.valueOf(cpeMaxEx));
				maxExVal = maxExVal + cpeMaxEx;
				category.setTotalIm(String.valueOf(cpeMaxIm));
				maxImVal = maxImVal + cpeMaxIm;
			}
		}
		
		for (CPEInfo cpe : arryCPE) {
			for (Categorize category : cpe.getArryCategory())
			{
//				float impact = 0;
//				if (Float.valueOf(category.getTotalIm()) != 0)
//					impact = (float) 1.176;
				
				result = (float) (((Float.valueOf(category.getTotalEx()) / maxExVal * ex) + (Float.valueOf(category.getTotalIm()) / maxImVal * im)));
				category.setFinalScore(String.valueOf(result));
			}
		}
		
		
		return arryCPE;
	}
	
	private static ArrayList<CPEInfo> getCPE (String path) {
		ArrayList<CPEInfo> arryCPE = new ArrayList<CPEInfo>();
		try {
			Document doc = parse (path);
			NodeList nodeList = doc.getElementsByTagName("oval-def:definition");
			
			CPEInfo cpe = null;
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node n = nodeList.item(i);
				NamedNodeMap node = n.getAttributes();
				if (node.getNamedItem("class").getNodeValue().equalsIgnoreCase("inventory")){
					cpe = new CPEInfo();
					cpe.setId(node.getNamedItem("id").getNodeValue());
					
					NodeList innodeList = nodeList.item(i).getChildNodes();
					for (int j = 0; j < innodeList.getLength(); j++) {
						Node in_n = innodeList.item(j);
						if (in_n.getNodeName().equalsIgnoreCase("oval-def:reference"))
						{
							cpe.setRef_id(in_n.getAttributes().getNamedItem("ref_id").getNodeValue());
						}
						if (in_n.getNodeName().equalsIgnoreCase("oval-def:affected"))
						{
							NodeList innodeList1 = in_n.getChildNodes();
							for (int k = 0; k < innodeList1.getLength(); k++) {
								Node in_n1 = innodeList1.item(k);
								if (in_n1.getNodeName().equalsIgnoreCase("oval-def:product")) {
									cpe.setProduct(in_n1.getTextContent());
//									System.out.println(in_n1.getTextContent());
								}
							}
						}
					}
					arryCPE.add(cpe);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return arryCPE;
	}
	
	private static ArrayList<CPEInfo> getCVE (String path, ArrayList<CPEInfo> arryCPE) {
		try {
			HashMap<String, CPEInfo> hmap = new HashMap<String, CPEInfo>();
			CVEInfo cve = null;
			Document doc = parse (path);
			NodeList nodeList = doc.getElementsByTagName("oval-def:definition");
			
			for (CPEInfo cpe : arryCPE)
				hmap.put(cpe.getProduct(), cpe);
			
			for (int i = 0; i < nodeList.getLength(); i++) {
				Node node = nodeList.item(i);
				NamedNodeMap nodemap = node.getAttributes();
				
				if (nodemap.getNamedItem("class").getNodeValue().equalsIgnoreCase("vulnerability")) {
					cve = new CVEInfo();
					NodeList nodeList1 = node.getChildNodes();
					for (int j = 0; j < nodeList1.getLength(); j++) {
						Node node1 = nodeList1.item(j);
						if (node1.getNodeName().equalsIgnoreCase("oval-def:reference")){
//							System.out.println(node1.getNodeName());
							NamedNodeMap nodemap1 = node1.getAttributes();
							cve.setCveid(nodemap1.getNamedItem("ref_id").getNodeValue());
							
//							NodeList nodeList2 = node.getChildNodes();
//							for (int k = 0; k < nodeList2.getLength();k++) {
//								Node node2 = nodeList2.item(k);
//								System.out.println(node2.getNodeName());
						}  else if (node1.getNodeName().equalsIgnoreCase("oval-def:affected")){
							NodeList nodeList2 = node1.getChildNodes();
							for (int q = 0; q < nodeList2.getLength(); q++) {
								Node node2 = nodeList2.item(q);
								if (node2.getNodeName().equalsIgnoreCase("oval-def:product")
										||node2.getNodeName().contains("oval-def:product")) {
									if (hmap.containsKey(node2.getTextContent())) {
										CPEInfo cpe = hmap.get(node2.getTextContent());
										cpe.setArry_Cve(cve);
									} else {
										Set<String> cpeset = hmap.keySet();
										CPEInfo cpe = null;
										for (String key : cpeset) {
											if (node2.getTextContent().contains(key) || key.contains(node2.getTextContent())) {
												cpe = hmap.get(key);
												break;
											}
										}
										if (cpe != null) {
											cpe.setArry_Cve(cve);
										}
									}
//									boolean bool = false;
//									for (CPEInfo cpe : arryCPE) {
////												System.out.println(cpe.getProduct());
////												System.out.println(node3.getTextContent());
//										if (node2.getTextContent().equalsIgnoreCase(cpe.getProduct())) {
//											cpe.setArry_Cve(cve);
//											bool = true;
//										}
//										if (bool)
//											break;
//									}
//									if (bool)
//										break;
								} 
							}
						}
//							}
//						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return arryCPE;
	}
	
	private static ArrayList<CPEInfo> getCVSS (ArrayList<CPEInfo> cpeList) {
		URL url = null;
		URLConnection conn = null;
		DataInputStream in = null;
		BufferedReader br = null;
		try{
			for (CPEInfo cpe : cpeList)
			{
				if (cpe.getArry_Cve().size() != 0) {
					for (CVEInfo cve : cpe.getArry_Cve()) {
						url = new URL("http://web.nvd.nist.gov/view/vuln/detail?vulnId=" + cve.getCveid());
						conn = url.openConnection();
						in = new DataInputStream( conn.getInputStream() );
						br = new BufferedReader( new InputStreamReader(in) );
						
						String text = "AV:[L|A|N]/AC:[H|M|L]/Au:[M|S|N]/C:[N|P|C]/I:[N|P|C]/A:[N|P|C]";
						String number = "(10|[0-9]).[0-9]";
						boolean area = false;
						boolean cvss = false;
						boolean impact = false;
						boolean exploit = false;
						boolean done = false;
						while (br.ready())
						{
							String str = br.readLine();
							if (str.contains("CVSS Severity (version 2.0)"))
								area = true;
							else if (str.contains("CVSS Version 2 Metrics")) 
								area = false;
							
							if (str.contains("CVSS v2 Base Score:"))
								cvss = true;
							
							if (str.contains("Impact Subscore:"))
								impact = true;
							
							if (str.contains("Exploitability Subscore:")) 
								exploit = true;
							
							if (area) {
								Pattern p = null;
								Matcher match = null;
								if (cvss) {
									p = Pattern.compile(text);
									match = p.matcher(str);
									if (match.find()) {
//										System.out.println(match.group(0));
										cve.setCvebasescore(match.group(0));
										cvss = false;
									}
								}
								
								if (impact) {
									p = Pattern.compile(number);
									match = p.matcher(str);
									if (match.find()) {
//										System.out.println(match.group(0));
										cve.setImpactScore(match.group(0));
										impact = false;
									}
								}
								if (exploit) {
									p = Pattern.compile(number);
									match = p.matcher(str);
									if (match.find()) {
//										System.out.println(match.group(0));
										cve.setExploitScore(match.group(0));
										exploit = false;
										done = true;
									}
								}
							}
							if (!cvss && !impact && !exploit && done)
								break;
						}
					}
				}	
			}
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} finally {
			try{
			if (br != null)
				br.close();
			if (in != null)
				in.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
			return cpeList;
	}
	
	private static Document parse (String path) {
		Document doc = null;
		try {
//			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
//			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
//			doc = dBuilder.parse(path);
		} catch (Exception e) {
			return null;
		}
		return doc;
	}
	
	public static void main(String[] args) {
		Assessment.assess("C:\\Users\\jseo15\\Desktop\\SEFCOM\\VulnerableServer\\result\\10.141.107.207\\10_141_107_207.xml", 1, 0, 0, (float)0.9, (float)0.1);
	}
	static long start = 0;
	static long end = 0;
	private static void timeChecker () {
		start = System.currentTimeMillis();
	}
	
	private static void Check () {
		end = System.currentTimeMillis(); 
		System.out.println((end - start) / 1000);
		end = 0;
		start = 0;
	}
}
