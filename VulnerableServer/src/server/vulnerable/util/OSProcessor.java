package server.vulnerable.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

import monitor.storage.information.agent.storage.AppAndDef;
import monitor.storage.information.agent.storage.OSDependentDef;

import server.vulnerability.util.SendToOWLServer;

public class OSProcessor {
	static ArrayList<AppAndDef> aadArry = null;
	public static boolean splitAndMerge ( OSDependentDef osd ) {
		aadArry = SendToOWLServer.sendResultToVulServer( osd.getOs() );
		System.out.println(aadArry.size());
		
		try {
			for ( int i = 0; i < aadArry.size(); i++ ) {
				boolean check = false;
				System.out.println("aadArry said: " + aadArry.get(i).getApp().replace(" ", "_"));
				for ( int idx = 0; idx < osd.getApps().size(); idx++) {
					System.out.println("osd said: " + osd.getApps().get(idx));
					if (osd.getApps().get(idx).replace(" ", "_").contains(aadArry.get(i).getApp())) {
						check = true;
					}
					if (!check && idx == osd.getApps().size()-1) {
						aadArry.remove(i);
						i--;
					}
				}
			}
			String mkpath = "InitialStatus";
			File mkfile = new File( mkpath + "\\" + osd.getHostname() );
			if (!mkfile.exists()) 
				mkfile.mkdir();
			
			for ( int i = 0; i < aadArry.size(); i++) {
				System.out.println(aadArry.get(i).getDefid());
				Process p = new ProcessBuilder("cmd", "/c", "java", "-jar", "OVAL_Splitter.jar", "-f", "oval.xml", "-id", aadArry.get(i).getDefid().replace("#", ""), "-o", mkfile.getAbsoluteFile().toString()).directory(new File ("oval_splitter")).start();
				BufferedReader in = new BufferedReader(  
	                    new InputStreamReader(p.getInputStream()));
				String line = "";
				while ((line = in.readLine())!= null) {
					System.out.println(line);
				}
			}
			
			Calendar calendar = new GregorianCalendar();
			int day = calendar.get(Calendar.DATE);
			int month = calendar.get(Calendar.MONTH);
			
			String resultpath = "runfile";
			File merge = new File( resultpath + "\\" + osd.getHostname() );
			
			if (!merge.exists())
				merge.mkdir();
		
			Process p = new ProcessBuilder("cmd", "/c", "java", "-jar", "OvalMerge.jar", "-i", mkfile.getAbsolutePath().toString(), "-o", merge.getAbsolutePath().toString(), "-f", month + "_" + day + ".xml" ).directory(new File ("oval_merge")).start();
			
			BufferedReader in = new BufferedReader(  
                    new InputStreamReader(p.getInputStream()));
			String line = "";
			while ((line = in.readLine()) != null) {
				System.out.println(line);
			}
			
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	public static void main(String[] args) {
		OSProcessor osd = new OSProcessor();
//		osd.splitAndMerge("Microsoft Windows 7");
	}
}
