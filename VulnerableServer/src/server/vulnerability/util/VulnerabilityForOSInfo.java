package server.vulnerability.util;

import java.io.ObjectInputStream;
//import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
//import java.util.ArrayList;

import monitor.storage.information.agent.storage.OSDependentDef;
//import monitor.storage.information.agent.storage.VulnerabilityInfo;
import server.vulnerable.util.OSProcessor;
//import server.vulnerable.util.VulnerableProcessor;

public class VulnerabilityForOSInfo extends Thread{
	private ServerSocket server = null;
	private static Socket socket = null;
	private static ObjectInputStream in;
//	private static ObjectOutputStream out;
	private int port = 0;
	
	public VulnerabilityForOSInfo( int port, ServerSocket server ) {
		// TODO Auto-generated constructor stub
		this.port = port;
		this.server = server;
	}
	
	public void run() {
		OSDependentDef osd = null;
		
		try{
			System.out.println( InetAddress.getLocalHost() );
			System.out.println( "Waiting for connection!!" + port );
			server = new ServerSocket( port );
			
			while( true ) {
				socket = server.accept();
				
				System.out.println( "Connection received from :" + socket.getInetAddress().getHostName() );
				
				in = new ObjectInputStream( socket.getInputStream() );
			
				boolean success = false;	
				osd = ( OSDependentDef ) in.readObject();
				success = OSProcessor.splitAndMerge( osd );
					
				in.close();
				
				if (success)
					System.out.println("success");
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Could not listen on port: " + port);
		    System.exit(-1);
		} finally {
//			try{
//				if ( out != null )
//					out.close();
//				
//				if ( in != null ) 
//					in.close();
//				
//				if ( server != null )
//					server.close();
//				
//			} catch (Exception e) {
//				// TODO: handle exception
//				e.printStackTrace();
//			}
		}
	}
	public static void main(String[] args) {
//		new VulnerabilityForOSInfo(21123).start();
	}
}
