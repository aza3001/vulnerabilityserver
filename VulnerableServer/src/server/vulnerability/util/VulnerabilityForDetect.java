package server.vulnerability.util;

import java.io.File;
import java.io.ObjectInputStream;
//import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JComboBox;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
//import java.util.ArrayList;

import monitor.storage.information.agent.storage.Characteristic;
import monitor.storage.information.agent.storage.ComputerInfoHolder;
//import monitor.storage.information.agent.storage.VulnerabilityInfo;
import server.vulnerable.util.VulnerableProcessor;
import server.vulnerable.util.WhatisMyIP;

public class VulnerabilityForDetect extends Thread {
	private ServerSocket server = null;
	private static Socket socket = null;
	private static ObjectInputStream in;
	private int port = 0;
	private JTextArea textArea;
	private String prev_ip = "";
	
	private DefaultTreeModel dtree;
	private DefaultTableModel dtable_1;
	
	private JTree tree;
	private JComboBox<String> comboBox;
	
	public VulnerabilityForDetect(int port, JTextArea textArea, DefaultTreeModel dtree, DefaultTableModel dtable_1, JTree tree, JComboBox<String> comboBox) {
		// TODO Auto-generated constructor stub
		this.port = port;
		this.textArea = textArea;
		this.dtree = dtree;
		this.dtable_1 = dtable_1;
		
		this.tree = tree;
		this.comboBox = comboBox;
	}
	
	public void stopThread() {
		try {
			if (in != null)
				in.close();
			if (socket != null)
				socket.close();
			if (server != null)
				server.close();
			
			textArea.append("[" + currentTime() + "] " + "Server stopped \n");
		} catch (Exception e) {
			
		}
	}
	
//	@SuppressWarnings("unchecked")
	public void run() {		
		String hostip = "";
		ComputerInfoHolder infoholder = null;
		VulnerableProcessor vp = null;
		try{
			System.out.println("=================================");
			System.out.println("");
			System.out.println( WhatisMyIP.getIPAddress() );
			System.out.println( "Waiting for connection!!" + port );
			System.out.println("");
			System.out.println("================================");
			textArea.append( "[" + currentTime() + "] " + "Waiting for vulnerability information receiving" + "\n");
			
			server = new ServerSocket();
			server.setReuseAddress(true);
			server.bind( new InetSocketAddress(port) );
			
			while( true ) {
				boolean success = false;
				vp = new VulnerableProcessor();
				
				socket = server.accept();
				
//				System.out.println( "Agent connection established from : " + socket.getInetAddress() );
				textArea.append( "[" + currentTime() + "] " + "Agent connection established from : " + socket.getInetAddress() + "\n");
				
				hostip = socket.getInetAddress().toString();
				
				in = new ObjectInputStream( socket.getInputStream() );
				infoholder = (ComputerInfoHolder) in.readObject();
//					System.out.println(viArry.size());
				
				success = vp.Processor( hostip, infoholder );
			
//					in = new ObjectInputStream( socket.getInputStream() );
//					viArry = (ArrayList<VulnerabilityInfo>) in.readObject();
//					System.out.println(viArry.size());
//					
//					socket.close();
//					
//					success = vp.Processor( viArry );
				textArea.append( "[" + currentTime() + "] " + "Report Generated for : " + socket.getInetAddress() + "\n");
				
				if (in != null)
					in.close();
				if (socket != null)
					socket.close();
				
//				updateTable(dtable_1, infoholder.getC(), infoholder.getUsername(), infoholder.getHostname());
				updateTree (hostip.replace("/", ""));
				updateComboBox (hostip.replace("/", ""));
				
				if (success)
					System.out.println("");
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// record current state
		}
	}
	
	private String currentTime() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Date date = new Date();
		return sdf.format(date);
	}
	
	private void updateTree(String hostname) {
		DefaultTreeModel model = dtree;
		
		File resultfolder = new File ("result\\" + hostname);
		if (resultfolder.exists()){
			File[] list = resultfolder.listFiles();
			
			File lastModifiedFile = null;
			if (list.length != 0) {
				lastModifiedFile = list[0];
				for (int i = 1; i < list.length; i++) {
				   if (lastModifiedFile.lastModified() <= list[i].lastModified()) {
				       lastModifiedFile = list[i];
				   }
				}
			}
			
//			System.out.println(lastModifiedFile.getPath());
			
			TreePath path = tree.getNextMatch(hostname, 0, Position.Bias.Forward);
			MutableTreeNode node = null;
			
			if (path != null) {
				node = (MutableTreeNode) path.getLastPathComponent();
				node.insert(new DefaultMutableTreeNode(lastModifiedFile.toString().substring(lastModifiedFile.toString().lastIndexOf("\\") + 1)), node.getChildCount());
				
				model.reload(node);
			} else {
				path = tree.getNextMatch("IPaddress", 0, Position.Bias.Forward);
				node = (MutableTreeNode) path.getLastPathComponent();
				
				MutableTreeNode node_1 = new DefaultMutableTreeNode(hostname);
				
				node_1.insert(new DefaultMutableTreeNode(lastModifiedFile.toString().substring(lastModifiedFile.toString().lastIndexOf("\\") + 1)), node_1.getChildCount());
				node.insert(node_1, node.getChildCount());
				model.reload(node);
			}
			
		} 
	}
	
	private void updateTable(DefaultTableModel dtable, Characteristic c, String username, String ipaddress) {
		for ( int i = 0; i < dtable.getRowCount(); i++ ) {
			if (dtable.getValueAt(i, 1).toString().equalsIgnoreCase(c.getMacaddress())
					&& dtable.getValueAt(i, 2).toString().equalsIgnoreCase(username))
			{
				prev_ip = dtable.getValueAt(i, 3).toString();
				System.out.println(prev_ip + " has been changed to the" + ipaddress);
				dtable.setValueAt(ipaddress, i, 3);
			}
		}
	}
	
	private void updateComboBox (String ip) {
		String exist_ip;
		if (comboBox.getItemCount() != 0) {
			boolean exist = false;
			for (int i = 0; i < comboBox.getItemCount(); i++) {
				 exist_ip = comboBox.getItemAt(i);
				 if (exist_ip.equalsIgnoreCase(ip)) {
					 exist = true;
					 break;
				 }
			}	
			
			if (!exist)
				 comboBox.addItem(ip);
		} else {
			comboBox.addItem(ip);
		}
	}
}
