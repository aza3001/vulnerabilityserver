package server.vulnerability.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JButton;
import javax.swing.table.DefaultTableModel;

import server.vulnerable.util.WhatisMyIP;

import monitor.storage.information.agent.storage.Characteristic;

public class LookupAgent implements Runnable {
//	private HashMap<String, String> result = null;
	private static ObjectOutputStream out = null;
	private Socket soc = null;
	private String[] startip;
	private String[] endip;
	private String ontologyserverip;
	private boolean stop;
	private DefaultTableModel dtable;
	private JButton jb;
	
	public LookupAgent(String[] startip, String[] endip, DefaultTableModel dtable, String ontologyserverip, JButton jb) {
		// TODO Auto-generated constructor stub
		this.startip = startip;
		this.endip = endip;
		this.dtable = dtable;
		this.ontologyserverip = ontologyserverip;
		this.jb = jb;
	}
	
	public boolean lookupIP (String[] startip, String[] endip) {
		String lookupip = "";
		boolean find = false;
		boolean exist = false;
		FileInputStream fis = null;
		ObjectInputStream ois = null;
		ArrayList<String> ips = new ArrayList<String>();
		HashMap<String, String> hmap = new HashMap<String, String>();
		
//		String vulip = WhatisMyIP.getIPAddress();
//		String[] splittedip = vulip.split("\\.");
		
		File existenceFile = new File("ip.dat");
		try{
			if (existenceFile.exists()) {
				fis = new FileInputStream( existenceFile );
				ois = new ObjectInputStream( fis );
			}
			
			hmap.put("VulServer", WhatisMyIP.getIPAddress());
			hmap.put("OntServer", ontologyserverip);
			@SuppressWarnings("unchecked")
			ArrayList<Characteristic> extips = (ArrayList<Characteristic>)ois.readObject();
			
			for ( int first = Integer.parseInt(startip[0]); first < Integer.parseInt(endip[0]); first++ ) {
				for ( int second = Integer.parseInt(startip[1]); second < Integer.parseInt(endip[1]); second++ ) {
					for (int third = Integer.parseInt(startip[2]); third < Integer.parseInt(endip[2]); third++ ) {
						for (int fourth = Integer.parseInt(startip[3]); fourth < Integer.parseInt(endip[3]); fourth++ ){
							if (!stop) {
								find = true;
								try{
									lookupip = startip[0] + "." + second + "." + third + "." + fourth;
									
									soc = new Socket();
									
									soc.connect( new InetSocketAddress(lookupip, 19999), 1000 );
									
									out = new ObjectOutputStream( soc.getOutputStream() );
									out.writeObject( hmap );
									
									out.flush();
									out.close();
									
									ois = new ObjectInputStream( soc.getInputStream() );
									Characteristic inCh = (Characteristic) ois.readObject();
									
									for ( Characteristic character : extips ) {
										if ( character.getMacaddress().equalsIgnoreCase(inCh.getMacaddress())) {
											exist = true;
											if (!character.getIPs().contains(lookupip))
												character.setArray(lookupip);
											else
												break;
										}
									}
									
									if (!exist) {
										Characteristic c = new Characteristic();
										c.setMacaddress(inCh.getMacaddress());
										c.setHostName(inCh.getHostName());
										c.setHostName(inCh.getHostName());
										c.setArray(lookupip);
										
										extips.add(c);
									}
									
									soc.close();
									
								} catch (Exception e) {
									System.out.println("agent not found on " + lookupip);
									find = false;
								} finally {
									if ( find ) {
										System.out.println(lookupip + " found!!!!! ");
										ips.add( lookupip );
									}
								}
							}
						}	
					}
				}
			}
		
		if (!extips.isEmpty()) {
			try{
				File file = new File("ip.dat");
				if (!file.exists())
					file.createNewFile();
				
				FileOutputStream fos = new FileOutputStream( file );
				ObjectOutputStream oos = new ObjectOutputStream( fos );
				oos.writeObject( extips );
				oos.close();
				fos.close();
				
			}catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
				return false;
			}
		}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		System.out.println("done");
		return true;
	}
	
	@SuppressWarnings("unchecked")
	public void lookupIP (String[] startip, String[] endip, DefaultTableModel dtable,  JButton jb) {
		String lookupip = "";
		boolean find = false;
		boolean exist = false;
		FileInputStream fis = null;
		ObjectInputStream ois = null;
		ArrayList<String> ips = new ArrayList<String>();
		HashMap<String, String> hmap = new HashMap<String, String>();
		
//		String vulip = WhatisMyIP.getIPAddress();
//		String[] splittedip = vulip.split("\\.");
		
		File existenceFile = new File("ip.dat");
		try{
			hmap.put("result", "success");
			hmap.put("VulServer", WhatisMyIP.getIPAddress());
			hmap.put("OntServer", ontologyserverip);
			ArrayList<Characteristic> extips = null;
			if (existenceFile.exists()) {
				fis = new FileInputStream( existenceFile );
				ois = new ObjectInputStream( fis );
				extips = (ArrayList<Characteristic>)ois.readObject();
			} else {
				extips = new ArrayList<Characteristic>();
			}
			
			int count = 1;
			if (extips != null && !extips.isEmpty()) {
				for (Characteristic c : extips) {
					dtable.setRowCount(count);
					dtable.setValueAt(count, count - 1, 0);
					dtable.setValueAt(c.getMacaddress(), count - 1, 1);
					dtable.setValueAt(c.getHostName(), count - 1, 2);
					dtable.setValueAt(c.getIPs().get(c.getIPs().size() - 1), count - 1, 3);
					count++;
				}
			}
			for ( int first = Integer.parseInt(startip[0]); first <= Integer.parseInt(endip[0]); first++ ) {
				for ( int second = Integer.parseInt(startip[1]); second <= Integer.parseInt(endip[1]); second++ ) {
					for (int third = Integer.parseInt(startip[2]); third <= Integer.parseInt(endip[2]); third++ ) {
						for (int fourth = Integer.parseInt(startip[3]); fourth <= Integer.parseInt(endip[3]); fourth++ ){
							if (!stop) {
								find = true;
								try{
									lookupip = startip[0] + "." + second + "." + third + "." + fourth;
									
									soc = new Socket();
									
									soc.connect( new InetSocketAddress(lookupip, 19999), 1000 );
									
									out = new ObjectOutputStream( soc.getOutputStream() );
									out.writeObject( hmap );
									
									out.flush();
									
									ois = new ObjectInputStream( soc.getInputStream() );
									Characteristic inCh = (Characteristic) ois.readObject();
									
									if (extips != null && !extips.isEmpty()) {
										for ( Characteristic character : extips ) {
											if ( character.getMacaddress().equalsIgnoreCase(inCh.getMacaddress())) {
												exist = true;
												if (!character.getIPs().contains(lookupip)) {
													character.setArray(lookupip);
												}
												else
													break;
											}
										}
									}
									
									if (!exist) {
										Characteristic c = new Characteristic();
										c.setMacaddress(inCh.getMacaddress());
										c.setHostName(inCh.getHostName());
										c.setArray(lookupip);
										
										dtable.setRowCount(count);
										
										dtable.setValueAt(count, count - 1, 0);
										dtable.setValueAt(inCh.getMacaddress(), count - 1, 1);
										dtable.setValueAt(inCh.getHostName(), count - 1, 2);
										dtable.setValueAt(lookupip, count - 1, 3);
										
										extips.add(c);
									}
									
									soc.close();
									
								} catch (Exception e) {
									e.printStackTrace();
									System.out.println("agent not found on " + lookupip);
									find = false;
								} finally {
									if ( find ) {
										System.out.println(lookupip + " found!!!!! ");
										ips.add( lookupip );
									}
								}
							}
						}	
					}
				}
			}
		
		if (!extips.isEmpty()) {
			try{
				File file = new File("ip.dat");
				if (!file.exists())
					file.createNewFile();
				
				FileOutputStream fos = new FileOutputStream( file );
				ObjectOutputStream oos = new ObjectOutputStream( fos );
				oos.writeObject( extips );
				oos.close();
				fos.close();
				
			}catch (Exception e) {
				// TODO: handle exception
			}
		}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sendAgentIPtoOntologyServer();
			
			jb.setEnabled(true);
		}
		
	}
	
//	public void sendIPInfo ( String ontip ) {
//		try {
//			File file = new File("ip.dat");
//			if (file.exists()) {
//				FileInputStream fis = new FileInputStream( file );
//				ObjectInputStream ois = new ObjectInputStream( fis );
//				@SuppressWarnings("unchecked")
//				ArrayList<String> ips = (ArrayList<String>)ois.readObject();
//				
//				result = new HashMap<String, String>();
//				
//				result.put( "result", "success" );
//				result.put( "ontip", ontip ); // put ontip in here
//				result.put( "vulip", WhatisMyIP.getIPAddress() );
//				
//				for  (String eachip : ips) {
//					soc = new Socket(eachip, 19999);
//					
//					out = new ObjectOutputStream( soc.getOutputStream() );
//					out.writeObject( result );
//					
//					out.flush();
//					out.close();
//					
//					soc.close();
//				}
//			}
//			
//		} catch (Exception e) {
//			// TODO: handle exception
//		}
//	}
	
	public void stopThread () {
		stop = true;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		lookupIP(startip, endip, dtable, jb);
	}

	public static void main(String[] args) {
//		System.out.println(WhatisMyIP.getIPAddress());
//		LookupAgent la = new LookupAgent();
//		la.lookupIP();
//		la.sendIPInfo("localhost"); // should input ip address where ontology server exists
	}
	
	private void sendAgentIPtoOntologyServer () {
		try {
			File file = new File("ip.dat");
			if (file.exists()) {
				FileInputStream fis = new FileInputStream( file );
				@SuppressWarnings("resource")
				ObjectInputStream ois = new ObjectInputStream( fis );
				@SuppressWarnings("unchecked")
				ArrayList<Characteristic> extips = (ArrayList<Characteristic>) ois.readObject();
				
				soc = new Socket();
				soc.connect( new InetSocketAddress(ontologyserverip, 20000), 1000 );
				out = new ObjectOutputStream( soc.getOutputStream() );
				
				out.writeObject(extips);
				out.flush();
				out.close();
				
				soc.close();
			}
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
}
